{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Le codage en binaire des nombres non entiers "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Le principe est l'extension du système déjà rencontré pour les nombres entiers. La partie décimale (à droite de la virgule) correspondra aux puissances négatives de 2.  \n",
    "\n",
    "|...|8|4|2|1|0.5|0.25|0.125|...|\n",
    "|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n",
    "|...|$2^3$|$2^2$|$2^1$|$2^0$|$2^{-1}$|$2^{-2}$|$2^{-3}$|...|\n",
    "|...|0|1|1|0,|1|0|1|...|\n",
    "\n",
    "**Exemple :** $110,101_2=1 \\times 2^2 + 1 \\times2^1 +0 \\times 2^0 + 1 \\times 2^{-1} +0 \\times 2^{-2}+1 \\times 2^{-2} =4+2+0,5+0,125=6,625$ "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tentatives de conversion \n",
    "\n",
    "Tout commence bien, avec un résultat mathématique rassurant : **tous** les nombres réels peuvent s'écrire comme une somme de puissances de 2 (puissances positives et négatives). \n",
    "\n",
    "#### Théorème :\n",
    "\n",
    "Pour tout réel $x \\in \\mathbb{R}^+$, il existe $p \\in \\mathbb{N}$ et $(a_p,a_{p-1},...,a_0,a_{-1},a_{-2},...)$ tels que $x = \\sum_{i=0}^pa_i2^i+\\sum_{i=1}^{+\\infty}a_{-i}2^{-i}$\n",
    "\n",
    "\n",
    "\n",
    "Écrire un nombre en binaire revient à calculer les coefficients $a_k$ (ils sont égaux à 0 ou 1). Il y en a un nombre fini pour la partie entière, mais un nombre potentiellement infini pour la partie décimale. \n",
    "\n",
    "### Méthode de conversion\n",
    "Considérons le nombre $3,6875$. Il se décompose en une partie entière (3) et une partie décimale ($0,6875$).\n",
    "\n",
    "- **partie entière :** $3=11_2$ \n",
    "- **partie entière :** la conversion de $0,6875$ se fait en plusieurs étapes.  \n",
    "$0,6875 \\times 2 = \\textbf{1},375$  \n",
    "$0,375 \\times 2   = \\textbf{0},75$   \n",
    "$0,75 \\times 2 = \\textbf{1},5$  \n",
    "$0,5 \\times 2 = \\textbf{1}$ \n",
    "\n",
    "On prend ensuite le chiffre des unités de tous les nombres obtenus : 1011\n",
    "\n",
    "Donc $3,6875=11,1011_2$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "solution2": "hidden",
    "solution2_first": true
   },
   "source": [
    "### Exercice 1\n",
    "Donner l'écriture binaire de 20,875."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "solution2": "hidden"
   },
   "source": [
    "*correction :*\n",
    "- partie entière : $20 = 10100_2$\n",
    "- partie décimale :\n",
    "    - $0,875 \\times 2 = \\textbf{1},75$  \n",
    "    - $0,75 \\times 2 = \\textbf{1},5 $\n",
    "    - $0,5 \\times 2  = \\textbf{1}$\n",
    " \n",
    "Donc $20,875=10100,111_2$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "solution2": "shown",
    "solution2_first": true
   },
   "source": [
    "### Exercice 2\n",
    "Donner l'écriture binaire de 0,2."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "solution2": "shown"
   },
   "source": [
    "*correction :*\n",
    "- partie entière : $0 = 0_2$\n",
    "- partie décimale :\n",
    "    - $0,2 \\times 2 = \\textbf{0},4$  \n",
    "    - $0,4 \\times 2 = \\textbf{0},8 $\n",
    "    - $0,8 \\times 2  = \\textbf{1},6$\n",
    "    - $0,6 \\times 2  = \\textbf{1},2$\n",
    "    - $0,2 \\times 2 = \\textbf{0},4$ \n",
    "    - *et cela continue...*\n",
    "\n",
    "Le nombre 0,2 n'admet pas d'écriture binaire **finie**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Conclusion \n",
    "\n",
    "Certains nombres n'admettent pas une écriture binaire finie. Or la mémoire d'un ordinateur, quelqu'il soit, est toujours finie. Certains nombres ne peuvent donc pas être représentés correctement en machine : c'est une impossibilité théorique. Cela amène à des comportements étranges : "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.30000000000000004"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "0.1+0.2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conséquences : la difficile manipulation des flottants "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En python, les nombres non entiers sont du type **float**. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(0.1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ces flottants (traduction française) sont à manipuler avec une extrême précaution. Il faut garder en tête que les calculs sont potentiellement faux, du moins imprécis, lorsque des flottants interviennent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-2.7755575615628914e-17"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "0.5-0.2-0.2-0.1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En 1991, durant la Guerre du Golfe, un missile anti-missile américain a raté sa cible de 500 mètres car son ordinateur interne émettait un signal toutes les 0.1 secondes. Au bout de 100 heures de fonctionnement, l'approximation du nombre flottant 0.1 a conduit à un décalage de 0,34 secondes, ce qui lui a fait rater sa cible. ([source](http://www-users.math.umn.edu/~arnold//disasters/patriot.html))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Comment faire des tests sur les flottants ? \n",
    "Si `a` et `b` sont deux flottants, le test classique"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "if a == b :\n",
    "    print(\"a et b sont égaux\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "a de grandes chances d'échouer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a et b sont différents\n"
     ]
    }
   ],
   "source": [
    "a = 0.1\n",
    "b = 0.3-0.2\n",
    "if a == b :\n",
    "    print(\"a et b sont égaux\")\n",
    "else :\n",
    "    print(\"a et b sont différents\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Il est plus sûr de tester la proximité de `a` et `b`. La fonction `abs(a-b)` renvoie un nombre positif égal à la distance entre `a` et `b`. Il faut alors décider d'un écart minimal `e` en dessous duquel on considèrera que `a` et `b` sont égaux."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a et b sont égaux\n"
     ]
    }
   ],
   "source": [
    "a = 0.1\n",
    "b = 0.3-0.2\n",
    "e = 10**(-12)\n",
    "if abs(a-b) < e :\n",
    "    print(\"a et b sont égaux\")\n",
    "else :\n",
    "    print(\"a et b sont différents\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "solution2": "hidden",
    "solution2_first": true
   },
   "source": [
    "## Exercice\n",
    "On considère la fonction $f(x)=x^3-6x+2$.   \n",
    "L'équation $f(x)=1$ admet une solution unique dans l'intervalle $[0;1]$.  \n",
    "Trouver une valeur approchée de cette solution à $10^{-5}$ près. On prendra `e`$=0,001$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "solution2": "hidden"
   },
   "source": [
    "*correction :*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "solution2": "hidden"
   },
   "outputs": [],
   "source": [
    "def f(x):\n",
    "    return x**3 - 6 * x + 2\n",
    "\n",
    "e = 10**(-3)\n",
    "a = 0\n",
    "while abs(f(a) - 1 ) > e :\n",
    "    a += 10**(-5)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
