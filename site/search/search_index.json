{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Cahier de textes \u2693\ufe0e S\u00e9ance du 01/09/2021 D\u00e9but de la Programmation Orient\u00e9e Objet S\u00e9ances pr\u00e9c\u00e9dentes Archives blabla blabla Eduscol NSI \u2693\ufe0e Retrouvez les informations institutionnelles sur la NSI (programmes, banque d'\u00e9preuves, ...) sur le site Eduscol .","title":"Accueil"},{"location":"index.html#cahier-de-textes","text":"S\u00e9ance du 01/09/2021 D\u00e9but de la Programmation Orient\u00e9e Objet S\u00e9ances pr\u00e9c\u00e9dentes Archives blabla blabla","title":"Cahier de textes"},{"location":"index.html#eduscol-nsi","text":"Retrouvez les informations institutionnelles sur la NSI (programmes, banque d'\u00e9preuves, ...) sur le site Eduscol .","title":"Eduscol NSI"},{"location":"Divers/Exercice_Perseverance.html","text":"Le message secret de Perseverance \u2693\ufe0e Lors de sa descente vers la plan\u00e8te Mars le 18/02/2021, le rover Perseverance de la Nasa a frein\u00e9 sa chute gr\u00e2ce \u00e0 un parachute qui a intrigu\u00e9 quelques internautes du forum Reddit. Vid\u00e9o du d\u00e9ploiement du parachute : https://youtu.be/N3b-1-yrQYw Les zones blanches et rouge se d\u00e9composent comme ceci : Indications \u2693\ufe0e Le tout premier secteur contenant un message est le secteur sur lequel est \u00e9crite la lettre D, qui est effectivement la signification de ce secteur. C'est en l'observant bien que vous comprendrez le codage qui a \u00e9t\u00e9 utilis\u00e9. Les autres secteurs sont marqu\u00e9s de points d'interrogation : c'est \u00e0 vous de d\u00e9couvrir ce qu'ils cachent. La phrase myst\u00e8re s'obtiendra en tournant en spirale depuis la lettre D, dans le sens horaire. La derni\u00e8re couronne (la plus \u00e0 l'ext\u00e9rieur) est un peu particuli\u00e8re, mais n'en disons pas plus... \u00c0 vous ! \u2693\ufe0e Un grand bravo aux brillants redditors u/rdtwt1 et u/tend0g . Update : faites votre propre parachute ! https://sjwarner.github.io/perseverance-parachute-generator/? Sources (attention spoiler): \u2693\ufe0e https://www.lemonde.fr/pixels/article/2021/02/23/des-internautes-dechiffrent-un-message-cache-dans-le-parachute-du-rover-de-la-nasa-sur-mars_6070952_4408996.html https://www.reddit.com/r/nasa/comments/lpy2fa/does_the_parachute_for_perseverance_have_some/goedts0/ https://twitter.com/steltzner/status/1364076615932645379","title":"Le message secret de Perseverance"},{"location":"Divers/Exercice_Perseverance.html#le-message-secret-de-perseverance","text":"Lors de sa descente vers la plan\u00e8te Mars le 18/02/2021, le rover Perseverance de la Nasa a frein\u00e9 sa chute gr\u00e2ce \u00e0 un parachute qui a intrigu\u00e9 quelques internautes du forum Reddit. Vid\u00e9o du d\u00e9ploiement du parachute : https://youtu.be/N3b-1-yrQYw Les zones blanches et rouge se d\u00e9composent comme ceci :","title":"Le message secret de Perseverance"},{"location":"Divers/Exercice_Perseverance.html#indications","text":"Le tout premier secteur contenant un message est le secteur sur lequel est \u00e9crite la lettre D, qui est effectivement la signification de ce secteur. C'est en l'observant bien que vous comprendrez le codage qui a \u00e9t\u00e9 utilis\u00e9. Les autres secteurs sont marqu\u00e9s de points d'interrogation : c'est \u00e0 vous de d\u00e9couvrir ce qu'ils cachent. La phrase myst\u00e8re s'obtiendra en tournant en spirale depuis la lettre D, dans le sens horaire. La derni\u00e8re couronne (la plus \u00e0 l'ext\u00e9rieur) est un peu particuli\u00e8re, mais n'en disons pas plus...","title":"Indications"},{"location":"Divers/Exercice_Perseverance.html#a-vous","text":"Un grand bravo aux brillants redditors u/rdtwt1 et u/tend0g . Update : faites votre propre parachute ! https://sjwarner.github.io/perseverance-parachute-generator/?","title":"\u00c0 vous !"},{"location":"Divers/Theme08_Mini-projets/05_Initiation_Pygame.html","text":"Initiation \u00e0 Pygame \u2693\ufe0e 0. Preambule \u2693\ufe0e Pygame est un package de Python facilitant la cr\u00e9ation de jeux bas\u00e9s une interface graphique. Vous pouvez : - l'installer sur votre distribution Python, par pip3 install pygame . - le tester directement via https://repl.it/, en choisissant pygame dans la liste des langages propos\u00e9s. 1. Pr\u00e9paration de la sc\u00e8ne du jeu \u2693\ufe0e 1 2 3 4 5 6 7 8 9 10 11 12 13 import pygame , sys from pygame.locals import * pygame . init () fenetre = pygame . display . set_mode (( 640 , 480 )) fenetre . fill ([ 10 , 186 , 181 ]) pygame . display . flip () while True : pass Ce code devrait vous donner ceci : Commentaires Le package sys permettra de fermer le programme au niveau de l'OS par la commande sys.exit() La ligne from pygame.locals import * permettra d'utiliser des variables locales d\u00e9j\u00e0 d\u00e9finies par pygame , comme MOUSEBUTTONDOWN , par exemple. Durant tout le code, notre sc\u00e8ne de travail sera l'objet fenetre , dans lequel nous viendrons coller de nouveaux \u00e9l\u00e9ments. \u00c9l\u00e9ments structurants d'un code pygame : - pygame.init() effectue une initialisation globale de tous les modules pygame import\u00e9s. \u00c0 mettre au d\u00e9but du code. - pygame.display.flip() effectue un rafra\u00eechissement total de tous les \u00e9l\u00e9ments graphiques de la fen\u00eatre. \u00c0 mettre donc plut\u00f4t vers la fin du code. - while True : comme tr\u00e8s souvent dans les jeux, la structure essentielle est une boucle infinie dont on ne sortira que par une interruption syst\u00e8me ( sys.exit() ) o\u00f9 lors de la bascule d'un bool\u00e9en. Pour l'instant, cette boucle est vide ( pass ). 2. Apparition d'un personnage \u2693\ufe0e 2.1. T\u00e9l\u00e9chargement de l'image \u2693\ufe0e Nous allons travailler avec le sprite ci-dessous, nomm\u00e9 perso.png . Il est issu de https://openclassrooms.com/fr/courses/1399541-interface-graphique-pygame-pour-python/1399813-premieres-fenetres T\u00e9l\u00e9chargez-le pour le mettre dans le m\u00eame dossier que votre code pygame . Vous pouvez trouver sur internet un grand nombre de sprites libres de droits, au format png (donc g\u00e9rant la transparence), dans de multiples positions (ce qui permet de simuler des mouvements fluides). Ici nous travaillerons avec un sprite unique. 2.2. Importation de l'image dans la fen\u00eatre \u2693\ufe0e 1 perso = pygame . image . load ( \"perso.png\" ) . convert_alpha () La fonction convert_alpha() est appel\u00e9e pour que soit correctement trait\u00e9 le canal de transparence (canal alpha ) de notre image. 2.3. Affichage de l'image \u2693\ufe0e \u00c0 ce stade, perso est un objet pygame de type Surface . Afin de facilement pouvoir le d\u00e9placer, nous allons stocker la position de cet objet dans une variable position_perso , qui sera de type rect . 1 position_perso = perso . get_rect () Pour afficher cette image, nous allons venir le superposer aux \u00e9l\u00e9ments graphiques d\u00e9j\u00e0 dessin\u00e9s (en l'occurence : rien) avec l'instruction blit() : 1 fenetre . blit ( perso , position_perso ) \u25b8 r\u00e9capitulatif du code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import pygame , sys from pygame.locals import * pygame . init () fenetre = pygame . display . set_mode (( 640 , 480 )) fenetre . fill ([ 10 , 186 , 181 ]) perso = pygame . image . load ( \"perso.png\" ) . convert_alpha () position_perso = perso . get_rect () fenetre . blit ( perso , position_perso ) pygame . display . flip () while True : pass Aper\u00e7u 3. Gestion des \u00e9v\u00e8nements \u2693\ufe0e Lorsqu'un programme pygame est lanc\u00e9, la variable interne pygame.event.get() re\u00e7oit en continu les \u00e9v\u00e8nements des p\u00e9riph\u00e9riques g\u00e9r\u00e9s par le syst\u00e8me d'exploitation. Nous allons nous int\u00e9resser aux \u00e9v\u00e8nements de type KEYDOWN (touche de clavier appuy\u00e9e) ou de type MOUSEBUTTONDOWN (boutons de souris appuy\u00e9). 3.1. \u00c9v\u00e8nements clavier \u2693\ufe0e 3.1.1. Exemple de code \u2693\ufe0e La structure de code pour d\u00e9tecter l'appui sur une touche de clavier est, dans le cas de la d\u00e9tection de la touche \u00abFl\u00e8che droite\u00bb : 1 2 3 4 for event in pygame . event . get (): if event . type == KEYDOWN : if event . key == K_RIGHT : print ( \"fl\u00e8che droite appuy\u00e9e\" ) La touche (en anglais key ) \u00abFl\u00e8che Droite\u00bb est appel\u00e9e K_RIGHT par pygame . Le nom de toutes les touches peut \u00eatre retrouv\u00e9 \u00e0 l'adresse https://www.pygame.org/docs/ref/key.html. Remarque : c'est gr\u00e2ce \u00e0 la ligne initiale 1 from pygame.locals import * que la variable K_RIGHT (et toutes les autres) est reconnue. 3.1.2. Probl\u00e8me de la r\u00e9manence \u2693\ufe0e Quand une touche de clavier est appuy\u00e9e, elle le reste un certain temps. Parfois volontairement (sur un intervalle long) quand l'utilisateur d\u00e9cide de la laisser appuy\u00e9e, mais aussi involontairement (sur un intervalle tr\u00e8s court), lors d'un appui \u00abclassique\u00bb. Il existe donc toujours un intervalle de temps pendant lequel la touche reste appuy\u00e9e. Que doit faire notre programme pendant ce temps ? Deux options sont possibles : - option 1 : consid\u00e9rer que la touche appuy\u00e9e correspond \u00e0 un seul et unique \u00e9v\u00e8nement, quelle que soit la dur\u00e9e de l'appui sur la touche. - option 2 : consid\u00e9rer qu'au bout d'un certain d\u00e9lai, la touche encore appuy\u00e9e doit d\u00e9clencher un nouvel \u00e9v\u00e8nement. Par d\u00e9faut, pygame est r\u00e9gl\u00e9 sur l'option 1. N\u00e9anmoins, il est classique pour les jeux vid\u00e9os de vouloir que \u00ablaisser la touche appuy\u00e9e\u00bb continue \u00e0 faire avancer le personnage. Nous allons donc faire en sorte que toutes les 50 millisecondes, un nouvel appui soit d\u00e9tect\u00e9 si la touche est rest\u00e9e enfonc\u00e9e. Cela se fera par l'expression : 1 pygame . key . set_repeat ( 50 ) 3.2 \u00c9v\u00e8nements souris \u2693\ufe0e 3.2.1. Exemple de code \u2693\ufe0e La structure de code pour d\u00e9tecter l'appui sur un bouton de la souris est, dans le cas de la d\u00e9tection du bouton de gauche (le bouton 1) : 1 2 3 for event in pygame . event . get (): if event . type == MOUSEBUTTONDOWN and event . button == 1 : print ( \"clic gauche d\u00e9tect\u00e9\" ) 3.2.2. R\u00e9cup\u00e9ration des coordonn\u00e9es de la souris \u2693\ufe0e Le tuple (abscisse, ordonn\u00e9e) des coordonn\u00e9es de la souris sera r\u00e9cup\u00e9r\u00e9 avec l'instruction pygame.mouse.get_pos() . 4. D\u00e9placement du personnage \u2693\ufe0e Le d\u00e9placement d'un personnage se fera toujours par modification de ses coordonn\u00e9es (et visuellement, par effacement de la derni\u00e8re position). Ce d\u00e9placement pourra \u00eatre : - absolu : on donne de nouvelles coordonn\u00e9es au personnage. - relatif : on indique de combien le personnage doit se d\u00e9caler par rapport \u00e0 sa position initiale. 4.1. D\u00e9placement absolu \u2693\ufe0e Pour afficher le personnage \u00e0 la position (100,200) , on \u00e9crira : 1 position_perso . topleft = ( 100 , 200 ) o\u00f9 position_perso est l'objet de type rect contenant les coordonn\u00e9es. Exercice 1 : R\u00e9aliser un d\u00e9placement al\u00e9atoire, comme l'animation ci-dessous. Vous pourrez utiliser les instructions : - pygame.time.delay(1000) afin de ne bouger le personnage que toutes les 1000 millisecondes. - randint(a,b) du package random , qui renvoie un entier pseudo-al\u00e9atoire entre a et b . Proposition de correction (cliquer pour faire appara\u00eetre) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import pygame , sys from pygame.locals import * from random import randint pygame . init () fenetre = pygame . display . set_mode (( 640 , 480 )) perso = pygame . image . load ( \"perso.png\" ) . convert_alpha () position_perso = perso . get_rect () while True : fenetre . fill ([ 10 , 186 , 181 ]) position_perso . topleft = ( randint ( 0 , 540 ), randint ( 0 , 380 )) fenetre . blit ( perso , position_perso ) pygame . display . flip () pygame . time . delay ( 1000 ) 4.2. D\u00e9placement relatif \u2693\ufe0e Pour d\u00e9placer le personnage de 15 pixels vers la droite et de 10 pixels vers le haut par rapport \u00e0 sa position pr\u00e9c\u00e9dente, on \u00e9crira : 1 position_perso . move ( 15 , - 10 ) o\u00f9 position_perso est l'objet de type rect contenant les coordonn\u00e9es. Exercice 2 : R\u00e9aliser un contr\u00f4le au clavier du personnage, comme dans l'animation ci-dessous. Proposition de correction (cliquer pour faire appara\u00eetre) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import pygame , sys from pygame.locals import * pygame . init () pygame . key . set_repeat ( 50 ) fenetre = pygame . display . set_mode (( 640 , 480 )) perso = pygame . image . load ( \"perso.png\" ) . convert_alpha () position_perso = perso . get_rect () pas_deplacement = 15 while True : for event in pygame . event . get () : if event . type == KEYDOWN : if event . key == K_DOWN : position_perso = position_perso . move ( 0 , pas_deplacement ) if event . key == K_UP : position_perso = position_perso . move ( 0 , - pas_deplacement ) if event . key == K_RIGHT : position_perso = position_perso . move ( pas_deplacement , 0 ) if event . key == K_LEFT : position_perso = position_perso . move ( - pas_deplacement , 0 ) fenetre . fill ([ 10 , 186 , 181 ]) fenetre . blit ( perso , position_perso ) pygame . display . flip () 5. \u00c0 vous ! \u2693\ufe0e Fabriquez le jeu que vous souhaitez \u00e0 partir des informations ci-dessus. Bien d'autres aides peuvent \u00eatre trouv\u00e9es dans les liens cit\u00e9es dans la partie Bibliographie. Exemple de r\u00e9alisation possible : un clicker avec un temps qui diminue \u00e0 progressivement, et comptage des points. Quelques aides : \u00e9crire du texte : 1 2 3 font = pygame . font . Font ( pygame . font . get_default_font (), 36 ) text = font . render ( \"Game Over\" , True , ( 255 , 0 , 0 )) fenetre . blit ( text , dest = ( 550 , 40 )) dessiner un rectangle : 1 pygame . draw . rect ( fenetre ,( 0 , 255 , 0 ),( 500 , 20 , 100 , 10 )) dessine un rectangle vert de 100 pixels sur 10 pixels, dont le coin en haut \u00e0 gauche est \u00e0 la position (500,20). g\u00e9rer le temps: 1 2 3 4 5 6 7 8 import time topchrono = time . time () delai = 5 sortir = False while sortir == False : if time . time () - topchrono > delai : print ( \"5 secondes se sont \u00e9coul\u00e9es\" ) sortir = True Bibliographie Documentation officielle de Pygame, https://www.pygame.org/docs/ Cours d'OpenClassrooms, https://openclassrooms.com/fr/courses/1399541-interface-graphique-pygame-pour-python/1399813-premieres-fenetres. G.Lassus, Lyc\u00e9e Fran\u00e7ois Mauriac -- Bordeaux","title":"Initiation \u00e0 Pygame"},{"location":"Divers/Theme08_Mini-projets/05_Initiation_Pygame.html#initiation-a-pygame","text":"","title":"Initiation \u00e0 Pygame"},{"location":"Divers/Theme08_Mini-projets/05_Initiation_Pygame.html#0-preambule","text":"Pygame est un package de Python facilitant la cr\u00e9ation de jeux bas\u00e9s une interface graphique. Vous pouvez : - l'installer sur votre distribution Python, par pip3 install pygame . - le tester directement via https://repl.it/, en choisissant pygame dans la liste des langages propos\u00e9s.","title":"0. Preambule"},{"location":"Divers/Theme08_Mini-projets/05_Initiation_Pygame.html#1-preparation-de-la-scene-du-jeu","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 import pygame , sys from pygame.locals import * pygame . init () fenetre = pygame . display . set_mode (( 640 , 480 )) fenetre . fill ([ 10 , 186 , 181 ]) pygame . display . flip () while True : pass Ce code devrait vous donner ceci : Commentaires Le package sys permettra de fermer le programme au niveau de l'OS par la commande sys.exit() La ligne from pygame.locals import * permettra d'utiliser des variables locales d\u00e9j\u00e0 d\u00e9finies par pygame , comme MOUSEBUTTONDOWN , par exemple. Durant tout le code, notre sc\u00e8ne de travail sera l'objet fenetre , dans lequel nous viendrons coller de nouveaux \u00e9l\u00e9ments. \u00c9l\u00e9ments structurants d'un code pygame : - pygame.init() effectue une initialisation globale de tous les modules pygame import\u00e9s. \u00c0 mettre au d\u00e9but du code. - pygame.display.flip() effectue un rafra\u00eechissement total de tous les \u00e9l\u00e9ments graphiques de la fen\u00eatre. \u00c0 mettre donc plut\u00f4t vers la fin du code. - while True : comme tr\u00e8s souvent dans les jeux, la structure essentielle est une boucle infinie dont on ne sortira que par une interruption syst\u00e8me ( sys.exit() ) o\u00f9 lors de la bascule d'un bool\u00e9en. Pour l'instant, cette boucle est vide ( pass ).","title":"1. Pr\u00e9paration de la sc\u00e8ne du jeu"},{"location":"Divers/Theme08_Mini-projets/05_Initiation_Pygame.html#2-apparition-dun-personnage","text":"","title":"2. Apparition d'un personnage"},{"location":"Divers/Theme08_Mini-projets/05_Initiation_Pygame.html#21-telechargement-de-limage","text":"Nous allons travailler avec le sprite ci-dessous, nomm\u00e9 perso.png . Il est issu de https://openclassrooms.com/fr/courses/1399541-interface-graphique-pygame-pour-python/1399813-premieres-fenetres T\u00e9l\u00e9chargez-le pour le mettre dans le m\u00eame dossier que votre code pygame . Vous pouvez trouver sur internet un grand nombre de sprites libres de droits, au format png (donc g\u00e9rant la transparence), dans de multiples positions (ce qui permet de simuler des mouvements fluides). Ici nous travaillerons avec un sprite unique.","title":"2.1. T\u00e9l\u00e9chargement de l'image"},{"location":"Divers/Theme08_Mini-projets/05_Initiation_Pygame.html#22-importation-de-limage-dans-la-fenetre","text":"1 perso = pygame . image . load ( \"perso.png\" ) . convert_alpha () La fonction convert_alpha() est appel\u00e9e pour que soit correctement trait\u00e9 le canal de transparence (canal alpha ) de notre image.","title":"2.2. Importation de l'image dans la fen\u00eatre"},{"location":"Divers/Theme08_Mini-projets/05_Initiation_Pygame.html#23-affichage-de-limage","text":"\u00c0 ce stade, perso est un objet pygame de type Surface . Afin de facilement pouvoir le d\u00e9placer, nous allons stocker la position de cet objet dans une variable position_perso , qui sera de type rect . 1 position_perso = perso . get_rect () Pour afficher cette image, nous allons venir le superposer aux \u00e9l\u00e9ments graphiques d\u00e9j\u00e0 dessin\u00e9s (en l'occurence : rien) avec l'instruction blit() : 1 fenetre . blit ( perso , position_perso ) \u25b8 r\u00e9capitulatif du code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import pygame , sys from pygame.locals import * pygame . init () fenetre = pygame . display . set_mode (( 640 , 480 )) fenetre . fill ([ 10 , 186 , 181 ]) perso = pygame . image . load ( \"perso.png\" ) . convert_alpha () position_perso = perso . get_rect () fenetre . blit ( perso , position_perso ) pygame . display . flip () while True : pass Aper\u00e7u","title":"2.3. Affichage de l'image"},{"location":"Divers/Theme08_Mini-projets/05_Initiation_Pygame.html#3-gestion-des-evenements","text":"Lorsqu'un programme pygame est lanc\u00e9, la variable interne pygame.event.get() re\u00e7oit en continu les \u00e9v\u00e8nements des p\u00e9riph\u00e9riques g\u00e9r\u00e9s par le syst\u00e8me d'exploitation. Nous allons nous int\u00e9resser aux \u00e9v\u00e8nements de type KEYDOWN (touche de clavier appuy\u00e9e) ou de type MOUSEBUTTONDOWN (boutons de souris appuy\u00e9).","title":"3. Gestion des \u00e9v\u00e8nements"},{"location":"Divers/Theme08_Mini-projets/05_Initiation_Pygame.html#31-evenements-clavier","text":"","title":"3.1. \u00c9v\u00e8nements clavier"},{"location":"Divers/Theme08_Mini-projets/05_Initiation_Pygame.html#32-evenements-souris","text":"","title":"3.2 \u00c9v\u00e8nements souris"},{"location":"Divers/Theme08_Mini-projets/05_Initiation_Pygame.html#4-deplacement-du-personnage","text":"Le d\u00e9placement d'un personnage se fera toujours par modification de ses coordonn\u00e9es (et visuellement, par effacement de la derni\u00e8re position). Ce d\u00e9placement pourra \u00eatre : - absolu : on donne de nouvelles coordonn\u00e9es au personnage. - relatif : on indique de combien le personnage doit se d\u00e9caler par rapport \u00e0 sa position initiale.","title":"4. D\u00e9placement du personnage"},{"location":"Divers/Theme08_Mini-projets/05_Initiation_Pygame.html#41-deplacement-absolu","text":"Pour afficher le personnage \u00e0 la position (100,200) , on \u00e9crira : 1 position_perso . topleft = ( 100 , 200 ) o\u00f9 position_perso est l'objet de type rect contenant les coordonn\u00e9es. Exercice 1 : R\u00e9aliser un d\u00e9placement al\u00e9atoire, comme l'animation ci-dessous. Vous pourrez utiliser les instructions : - pygame.time.delay(1000) afin de ne bouger le personnage que toutes les 1000 millisecondes. - randint(a,b) du package random , qui renvoie un entier pseudo-al\u00e9atoire entre a et b . Proposition de correction (cliquer pour faire appara\u00eetre) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import pygame , sys from pygame.locals import * from random import randint pygame . init () fenetre = pygame . display . set_mode (( 640 , 480 )) perso = pygame . image . load ( \"perso.png\" ) . convert_alpha () position_perso = perso . get_rect () while True : fenetre . fill ([ 10 , 186 , 181 ]) position_perso . topleft = ( randint ( 0 , 540 ), randint ( 0 , 380 )) fenetre . blit ( perso , position_perso ) pygame . display . flip () pygame . time . delay ( 1000 )","title":"4.1. D\u00e9placement absolu"},{"location":"Divers/Theme08_Mini-projets/05_Initiation_Pygame.html#42-deplacement-relatif","text":"Pour d\u00e9placer le personnage de 15 pixels vers la droite et de 10 pixels vers le haut par rapport \u00e0 sa position pr\u00e9c\u00e9dente, on \u00e9crira : 1 position_perso . move ( 15 , - 10 ) o\u00f9 position_perso est l'objet de type rect contenant les coordonn\u00e9es. Exercice 2 : R\u00e9aliser un contr\u00f4le au clavier du personnage, comme dans l'animation ci-dessous. Proposition de correction (cliquer pour faire appara\u00eetre) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import pygame , sys from pygame.locals import * pygame . init () pygame . key . set_repeat ( 50 ) fenetre = pygame . display . set_mode (( 640 , 480 )) perso = pygame . image . load ( \"perso.png\" ) . convert_alpha () position_perso = perso . get_rect () pas_deplacement = 15 while True : for event in pygame . event . get () : if event . type == KEYDOWN : if event . key == K_DOWN : position_perso = position_perso . move ( 0 , pas_deplacement ) if event . key == K_UP : position_perso = position_perso . move ( 0 , - pas_deplacement ) if event . key == K_RIGHT : position_perso = position_perso . move ( pas_deplacement , 0 ) if event . key == K_LEFT : position_perso = position_perso . move ( - pas_deplacement , 0 ) fenetre . fill ([ 10 , 186 , 181 ]) fenetre . blit ( perso , position_perso ) pygame . display . flip ()","title":"4.2. D\u00e9placement relatif"},{"location":"Divers/Theme08_Mini-projets/05_Initiation_Pygame.html#5-a-vous","text":"Fabriquez le jeu que vous souhaitez \u00e0 partir des informations ci-dessus. Bien d'autres aides peuvent \u00eatre trouv\u00e9es dans les liens cit\u00e9es dans la partie Bibliographie. Exemple de r\u00e9alisation possible : un clicker avec un temps qui diminue \u00e0 progressivement, et comptage des points. Quelques aides : \u00e9crire du texte : 1 2 3 font = pygame . font . Font ( pygame . font . get_default_font (), 36 ) text = font . render ( \"Game Over\" , True , ( 255 , 0 , 0 )) fenetre . blit ( text , dest = ( 550 , 40 )) dessiner un rectangle : 1 pygame . draw . rect ( fenetre ,( 0 , 255 , 0 ),( 500 , 20 , 100 , 10 )) dessine un rectangle vert de 100 pixels sur 10 pixels, dont le coin en haut \u00e0 gauche est \u00e0 la position (500,20). g\u00e9rer le temps: 1 2 3 4 5 6 7 8 import time topchrono = time . time () delai = 5 sortir = False while sortir == False : if time . time () - topchrono > delai : print ( \"5 secondes se sont \u00e9coul\u00e9es\" ) sortir = True Bibliographie Documentation officielle de Pygame, https://www.pygame.org/docs/ Cours d'OpenClassrooms, https://openclassrooms.com/fr/courses/1399541-interface-graphique-pygame-pour-python/1399813-premieres-fenetres. G.Lassus, Lyc\u00e9e Fran\u00e7ois Mauriac -- Bordeaux","title":"5. \u00c0 vous !"},{"location":"T1_Demarrer_en_Python/sommaire.html","text":"Variables Boucle For Boucle While Instruction conditionnelle If Fonctions","title":"Sommaire"},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours.html","text":"1.1 Variables \u2693\ufe0e","title":"1.1 Variables"},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours.html#11-variables","text":"","title":"1.1 Variables"},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/cours.html","text":"1.2 Boucle For \u2693\ufe0e","title":"1.2 Boucle For"},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/cours.html#12-boucle-for","text":"","title":"1.2 Boucle For"},{"location":"T1_Demarrer_en_Python/1.3_Boucle_while/cours.html","text":"1.3 Boucle While \u2693\ufe0e","title":"1.3 Boucle While"},{"location":"T1_Demarrer_en_Python/1.3_Boucle_while/cours.html#13-boucle-while","text":"","title":"1.3 Boucle While"},{"location":"T1_Demarrer_en_Python/1.4_Instruction_conditionnelle_if/cours.html","text":"1.4 Instruction conditionnelle if \u2693\ufe0e","title":"1.4 Instruction conditionnelle if"},{"location":"T1_Demarrer_en_Python/1.4_Instruction_conditionnelle_if/cours.html#14-instruction-conditionnelle-if","text":"","title":"1.4 Instruction conditionnelle if"},{"location":"T1_Demarrer_en_Python/1.5_Fonctions/cours.html","text":"1.5 Fonctions \u2693\ufe0e","title":"1.5 Fonctions"},{"location":"T1_Demarrer_en_Python/1.5_Fonctions/cours.html#15-fonctions","text":"","title":"1.5 Fonctions"},{"location":"T2_Representation_des_donnees/01_Listes/cours.html","text":"2.1 Listes \u2693\ufe0e","title":"2.1 Listes"},{"location":"T2_Representation_des_donnees/01_Listes/cours.html#21-listes","text":"","title":"2.1 Listes"},{"location":"T2_Representation_des_donnees/02_Tuples/cours.html","text":"2.2 Tuples \u2693\ufe0e","title":"2.2 Tuples"},{"location":"T2_Representation_des_donnees/02_Tuples/cours.html#22-tuples","text":"","title":"2.2 Tuples"},{"location":"T2_Representation_des_donnees/03_Dictionnaires/cours.html","text":"2.3 Dictionnaires \u2693\ufe0e","title":"2.3 Dictionnaires"},{"location":"T2_Representation_des_donnees/03_Dictionnaires/cours.html#23-dictionnaires","text":"","title":"2.3 Dictionnaires"},{"location":"T2_Representation_des_donnees/Bases/cours.html","text":"2.4 Diff\u00e9rentes bases \u2693\ufe0e","title":"2.4 Diff\u00e9rentes bases"},{"location":"T2_Representation_des_donnees/Bases/cours.html#24-differentes-bases","text":"","title":"2.4 Diff\u00e9rentes bases"},{"location":"T3_Architecture_materielle/03_Architecture_reseau.html","text":"Architecture d'un r\u00e9seau \u2693\ufe0e Ce cours a pour but de pr\u00e9senter la constitution classique d'un r\u00e9seau, et les \u00e9quipements associ\u00e9s. La partie relative aux protocoles utilis\u00e9s lors des \u00e9changes entre deux machines est d\u00e9taill\u00e9e dans le cours 04_Protocoles_de_communication . 1. Premier r\u00e9seau local \u2693\ufe0e lien de t\u00e9l\u00e9chargement de Filius sous Linux Au sein du logiciel Filius , cr\u00e9ons le r\u00e9seau local ci-dessous : Testons le ping de la machine 192.168.0.1 vers la machine 192.168.0.3 . R\u00e9sultat ![](data/ft1.png) 1.1. La carte r\u00e9seau et son adresse MAC \u2693\ufe0e Chaque ordinateur sur le r\u00e9seau dispose d'une adresse MAC, qui une valeur unique attribu\u00e9e \u00e0 sa carte r\u00e9seau (Ethernet, Wifi, 4G, 5G, ...) lors de sa fabrication en usine. Cette adresse est cod\u00e9e sur 48 bits, pr\u00e9sent\u00e9s sous la forme de 6 octets en hexad\u00e9cimal. Exemple : fc:aa:14:75:45:a5 Les trois premiers octets correspondent au code du fabricant. Un site comme https://www.macvendorlookup.com/ vous permet de retrouver le fabricant d'une adresse MAC quelconque. 1.2. Switch, hub, quelle diff\u00e9rence ? \u2693\ufe0e Au sein d'un hub Ethernet (de moins en moins vendus), il n'y a aucune analyse des donn\u00e9es qui transitent : il s'agit simplement d'un d\u00e9doublement des fils de cuivre (tout comme une multiprise \u00e9lectrique). L'int\u00e9gralit\u00e9 des messages est donc envoy\u00e9e \u00e0 l'int\u00e9gralit\u00e9 des ordinateurs du r\u00e9seau, m\u00eame s'ils ne sont pas concern\u00e9s. Au sein d'un switch Ethernet , une analyse est effectu\u00e9e sur la trame qui est \u00e0 distribuer (voir ici ). Lors d'un branchement d'un nouvel ordinateur sur le switch, celui-ci r\u00e9cup\u00e8re son adresse MAC, ce qui lui permet de trier les messages et de ne les distribuer qu'au bon destinataire. 2. Un deuxi\u00e8me sous-r\u00e9seau \u2693\ufe0e Rajoutons un deuxi\u00e8me sous-r\u00e9seau de la mani\u00e8re suivante (penser \u00e0 bien renommer les switchs). Comment relier ces deux sous-r\u00e9seaux ? Une r\u00e9ponse pas si b\u00eate : avec un cable entre les deux switchs ! Testons cette hypoth\u00e8se en essayant de pinger la machine 192.168.1.2 depuis la machine 192.168.0.1 . R\u00e9sultat ![](data/ft2.png) Cela ne marche pas. Les paquets sont perdus. Temporairement, renommons la machine 192.168.1.2 en 192.168.0.33 . Testons \u00e0 nouveau le ping depuis la machine 192.168.0.1 . R\u00e9sultat ![](data/ft3.png) Cela marche. Les paquets sont bien achemin\u00e9s. Intuition : la notion de sous-r\u00e9seau n'est pas topologique (\u00abil suffit de relier les ordinateurs entre eux\u00bb) mais ob\u00e9it \u00e0 des r\u00e8gles num\u00e9riques. 2.1. Notion de masque de sous-r\u00e9seau \u2693\ufe0e Dans Filius, lors de l'attribution de l'adresse IP \u00e0 une machine, une ligne nous permet de sp\u00e9cifier le masque de sous-r\u00e9seau (appel\u00e9 simplement \u00ab Masque \u00bb dans Filius). C'est ce masque qui va permettre de d\u00e9terminer si une machine appartient \u00e0 un sous-r\u00e9seau ou non, en fonction de son adresse IP. 2.1.1 Explication basique \u2693\ufe0e Si le masque est 255.255.255.0 , toutes les machines partageant les m\u00eames trois premiers nombres de leur adresse IP appartiendront au m\u00eame sous-r\u00e9seau. Comme ceci est le r\u00e9glage par d\u00e9faut de Filius, cela explique pourquoi 192.168.0.33 et 192.168.0.1 sont sur le m\u00eame sous-r\u00e9seau, et pourquoi 192.168.1.2 et 192.168.0.1 ne sont pas sur le m\u00eame sous-r\u00e9seau. Dans cette configuration, 256 machines peuvent donc appartenir au m\u00eame sous-r\u00e9seau (ce n'est pas tout \u00e0 fait le cas car des adresses finissant par 0 ou par 255 sont r\u00e9serv\u00e9es). Si le masque est 255.255.0.0 , toutes les machines partageant les m\u00eames deux premiers nombres de leur adresse IP appartiendront au m\u00eame sous-r\u00e9seau. Dans cette configuration, 65536 machines peuvent \u00eatre dans le m\u00eame sous-r\u00e9seau. (car 256^2=65536) Exercice - Renommons 192.168.0.33 en 192.168.1.2 et modifions son masque en 255.255.0.0 . - Modifions aussi le masque de 192.168.0.1 en 255.255.0.0 . - Testons le ping de 192.168.0.1 vers 192.168.1.2 . R\u00e9sultat ![](data/ft4.png) Cela marche. Les deux machines appartiennent maintenant au m\u00eame sous-r\u00e9seau. 2.1.2 Explication avanc\u00e9e \u2693\ufe0e Lorsqu'une machine A veut envoyer un message \u00e0 une machine B, elle doit d\u00e9terminer si cette machine : - appartient au m\u00eame sous-r\u00e9seau : auquel cas le message est envoy\u00e9 directement via un ou plusieurs switchs. - n'appartient pas au m\u00eame sous-r\u00e9seau : auquel cas le message doit d'abord transiter par un routeur (voir 3.) Quelle op\u00e9ration permet de distinguer cette appartenance \u00e0 un m\u00eame sous-r\u00e9seau ? Appelons IP_A et IP_B les adresses IP respectives des machines A et B. Appelons M le masque de sous-r\u00e9seau. Nommons & l'op\u00e9rateur de conjonction entre nombres binaires (voir ici ): Propri\u00e9t\u00e9 : A et B appartiennent au m\u00eame sous-r\u00e9seau \u21d4 IP_A & M = IP_B & M Exemple : consid\u00e9rons trois machines A, B, C d'IP respectives 192.168.129.10 , 192.168.135.200 et 192.168.145.1 , configur\u00e9es avec un masque de sous-r\u00e9seau \u00e9gal \u00e0 255.255.248.0 . machine A machine B machine C IP 192.168.129.10 192.168.135.200 192.168.145.1 M 255.255.248.0 255.255.248.0 255.255.248.0 IP & M 192.168.128.0 192.168.128.0 192.168.144.0 rappel des r\u00e8gles de calcul : - pour tout octet x , x & 255 = x et x & 0 = 0 . - 129 & 248 s'\u00e9crit en binaire 10000001 & 11111000 qui vaut 10000000 , soit 128 en d\u00e9cimal. Conclusion : les machines A et B sont sous le m\u00eame sous-r\u00e9seau, mais pas la machine C. 2.1.3 Coh\u00e9rence entre les deux explications \u2693\ufe0e Lorsqu'un masque de sous-r\u00e9seau est \u00e9gal \u00e0 255.255.255.0 , l'op\u00e9ration de conjonction & avec chaque IP ne laissera intacts que les 3 premiers octets, le dernier sera \u00e9gal \u00e0 0. Donc si deux adresses s'\u00e9crivent A.B.C.X et A.B.C.Y , elles appartiendront forc\u00e9ment au m\u00eame sous-r\u00e9seau (typiquement, c'est le cas de 192.168.0.33 et 192.168.0.1 ). 2.2 \u00c9criture des masques de sous-r\u00e9seau : notation CIDR \u2693\ufe0e D'apr\u00e8s ce qui pr\u00e9c\u00e8de, 2 informations sont n\u00e9cessaires pour d\u00e9terminer le sous-r\u00e9seau auquel appartient une machine : son IP et le masque de sous-r\u00e9seau. Une convention de notation permet d'\u00e9crire simplement ces deux renseignements : la notation CIDR. Exemple : Une machine d'IP 192.168.0.33 avec un masque de sous-r\u00e9seau 255.255.255.0 sera d\u00e9sign\u00e9e par 192.168.0.33 / 24 en notation CIDR. Le suffixe / 24 signifie que le masque de sous-r\u00e9seau commence par 24 bits cons\u00e9cutifs de valeur 1 : le reste des bits (donc 8 bits) est \u00e0 mis \u00e0 0. Autrement dit, ce masque vaut 11111111.11111111.11111111.00000000 , soit 255.255.255.0 . De la m\u00eame mani\u00e8re, le suffixe / 16 donnera un masque de 11111111.11111111.00000000.00000000 , soit 255.255.0.0 . Ou encore, un suffixe / 21 donnera un masque de 11111111.11111111.11111000.00000000 , soit 255.255.248.0 . 3. Un vrai r\u00e9seau contenant deux sous-r\u00e9seaux distincts : la n\u00e9cessit\u00e9 d'un routeur \u2693\ufe0e Notre solution initiale (relier les deux switchs par un cable pour unifier les deux sous-r\u00e9seaux) n'est pas viable \u00e0 l'\u00e9chelle d'un r\u00e9seau plan\u00e9taire. Pour que les machines de deux r\u00e9seaux diff\u00e9rents puissent \u00eatre connect\u00e9es, on va utiliser un dispositif \u00e9quip\u00e9 de deux cartes r\u00e9seaux , situ\u00e9 \u00e0 cheval entre les deux sous-r\u00e9seaux. Ce \u00e9quipement de r\u00e9seau est appel\u00e9 routeur ou passerelle . 3.1 Principe de fonctionnement \u2693\ufe0e Imaginons que la machine 192.168.0.1 / 24 veuille communiquer avec la machine 172.16.52.3 / 24 . L'observation du masque de sous-r\u00e9seau de la machine 192.168.0.1 / 24 nous apprend qu'elle ne peut communiquer qu'avec les adresses de la forme 192.168.0.X / 24 , o\u00f9 X est un nombre entre 0 et 255. Les 3 \u00e9tapes du routage : - Lorsque qu'une machine A veut envoyer un message \u00e0 une machine B, elle va tout d'abord v\u00e9rifier si cette machine appartient \u00e0 son r\u00e9seau local. si c'est le cas, le message est envoy\u00e9 par l'interm\u00e9diaire du switch qui relie les deux machines. - Si la machine B n'est pas trouv\u00e9e sur le r\u00e9seau local de la machine A, le message va \u00eatre achemin\u00e9 vers le routeur, par l'interm\u00e9diaire de son adresse de passerelle (qui est bien une adresse appartenant au sous-r\u00e9seau de A). - De l\u00e0, le routeur va regarder si la machine B appartient au deuxi\u00e8me sous-r\u00e9seau auquel il est connect\u00e9. Si c'est le cas, le message est distribu\u00e9, sinon, le routeur va donner le message \u00e0 un autre routeur auquel il est connect\u00e9 et va le charger de distribuer ce message : c'est le proc\u00e9d\u00e9 (complexe) de routage , qui sera vu en classe de Terminale. Dans notre exemple, l'adresse 172.16.52.3 n'est pas dans le sous-r\u00e9seau de 192.168.0.1 . Le message va donc transiter par le routeur. 3.2 Illustration avec Filius \u2693\ufe0e Rajoutons un routeur entre le SwitchA et le SwitchB. Configuration du routeur : L'interface reli\u00e9e au Switch A doit avoir une adresse du sous-r\u00e9seau A. On donne souvent une adresse finissant par 254 , qui est en quelque sorte la derni\u00e8re adresse du r\u00e9seau (en effet l'adresse en 255 est appel\u00e9e adresse de broadcast , utilis\u00e9e pour pinger en une seule fois l'int\u00e9gralit\u00e9 d'un sous-r\u00e9seau). On donne donc l'adresse 192.168.0.254 pour l'interface reli\u00e9e au Switch A, et 192.168.1.254 pour l'interface reli\u00e9e au Switch B. Dans l'onglet g\u00e9n\u00e9ral, s\u00e9lectionner \u00ab Routage automatique \u00bb. Ainsi configur\u00e9 notre routeur peut jouer le r\u00f4le de passerelle entre les deux sous-r\u00e9seaux. Test du ping entre 192.168.0.1 et 192.168.1.2 : R\u00e9sultat ![](data/ft2.png) Cela ne marche pas. Les paquets sont perdus. Pourquoi cet \u00e9chec ? Parce que nous devons dire \u00e0 chaque machine qu'une passerelle est maintenant disponible pour pouvoir sortir de son propre sous-r\u00e9seau. Il faut donc aller sur la machine 192.168.0.1 et lui donner l'adresse de sa passerelle, qui est 192.168.0.254 . Attention, il faut faire de m\u00eame pour 192.168.1.2 (avec la bonne passerelle...) Testons \u00e0 nouveau le ping... Cette fois cela marche. Plus int\u00e9ressant : effectuons un traceroute entre 192.168.0.1 et 192.168.1.2 . On y aper\u00e7oit que la machine 192.168.1.2 est atteignable en deux sauts depuis 192.168.0.1 , en passant par la passerelle 192.168.0.254 Cas d'un r\u00e9seau domestique Chez vous, la box de votre op\u00e9rateur joue simultan\u00e9ment le r\u00f4le de switch et de routeur : - switch car elle r\u00e9partit la connexion entre les diff\u00e9rents dispositifs (ordinateurs branch\u00e9s en ethernet, smartphone en wifi, tv connect\u00e9e...) - routeur car elle fait le lien entre ce sous-r\u00e9seau domestique (les appareils de votre maison) et le r\u00e9seau internet. L'image ci-dessous pr\u00e9sente le r\u00e9sultat de la commande ipconfig sous Windows. On y retrouve l'adresse IP locale 192.168.9.103 , le masque de sous-r\u00e9seau 255.255.255.0 et l'adresse de la passerelle 192.168.9.1 . 3.3 Annexe : rajout d'un serveur DNS \u2693\ufe0e 3.3.1 Rajout d'un serveur web \u2693\ufe0e Connectons un ordinateur au SwitchB, sur l'adresse 192.168.1.30 et installons dessus un Serveur web et d\u00e9marrons-le. Sur la machine 192.168.0.1 , rajoutons un Navigateur Web. En tapant dans la barre d'adresse l'adresse IP du Serveur web, la page d'accueil de Filius s'affiche. Lors d'une utilisation classique d'un navigateur web, c'est une url m\u00e9morisable qui s'affiche, et non une adresse IP : on retient en effet plus facilement https://www.google.com/ que http://216.58.213.131, qui renvoient pourtant \u00e0 la m\u00eame adresse. La machine qui assure ce r\u00f4le d'annuaire entre les serveurs web et leur adresse IP s'appelle un serveur DNS . Pour pouvoir indexer la totalit\u00e9 des sites internet, son r\u00f4le est structur\u00e9 de mani\u00e8re hi\u00e9rarchique. Vous trouverez des d\u00e9tails ici : https://openclassrooms.com/fr/courses/857447-apprenez-le-fonctionnement-des-reseaux-tcp-ip/857163-le-service-dns 3.3.1 Rajout d'un serveur DNS \u2693\ufe0e Rajoutons un serveur DNS minimal, qui n'aura dans son annuaire d'un seul site. Il faut pour cela raccorder une nouvelle machine (mais une machine d\u00e9j\u00e0 sur le r\u00e9seau aurait tr\u00e8s bien pu jouer ce r\u00f4le), et installer dessus un serveur DNS. Sur ce serveur DNS, associons l'adresse http://www.vivelansi.fr \u00e0 l'adresse IP 192.168.1.30 . De retour sur notre machine 192.168.0.1 , sp\u00e9cifions maintenant l'adresse du serveur DNS : Depuis le navigateur web de la machine 192.168.0.1 , le site http://www.vivelansi.fr est maintenant accessible. Bibliographie - Num\u00e9rique et Sciences Informatiques, 1re, T. BALABONSKI, S. CONCHON, J.-C. FILLIATRE, K. NGUYEN, \u00e9ditions ELLIPSES. - Cours d'OpenClassrooms : - https://openclassrooms.com/fr/courses/857447-apprenez-le-fonctionnement-des-reseaux-tcp-ip/854659-le-routage - https://openclassrooms.com/fr/courses/1561696-les-reseaux-de-zero/3607286-ladressage-cidr G.Lassus, Lyc\u00e9e Fran\u00e7ois Mauriac -- Bordeaux","title":"03 Architecture reseau"},{"location":"T3_Architecture_materielle/03_Architecture_reseau.html#architecture-dun-reseau","text":"Ce cours a pour but de pr\u00e9senter la constitution classique d'un r\u00e9seau, et les \u00e9quipements associ\u00e9s. La partie relative aux protocoles utilis\u00e9s lors des \u00e9changes entre deux machines est d\u00e9taill\u00e9e dans le cours 04_Protocoles_de_communication .","title":"Architecture d'un r\u00e9seau"},{"location":"T3_Architecture_materielle/03_Architecture_reseau.html#1-premier-reseau-local","text":"lien de t\u00e9l\u00e9chargement de Filius sous Linux Au sein du logiciel Filius , cr\u00e9ons le r\u00e9seau local ci-dessous : Testons le ping de la machine 192.168.0.1 vers la machine 192.168.0.3 . R\u00e9sultat ![](data/ft1.png)","title":"1. Premier r\u00e9seau local"},{"location":"T3_Architecture_materielle/03_Architecture_reseau.html#2-un-deuxieme-sous-reseau","text":"Rajoutons un deuxi\u00e8me sous-r\u00e9seau de la mani\u00e8re suivante (penser \u00e0 bien renommer les switchs). Comment relier ces deux sous-r\u00e9seaux ? Une r\u00e9ponse pas si b\u00eate : avec un cable entre les deux switchs ! Testons cette hypoth\u00e8se en essayant de pinger la machine 192.168.1.2 depuis la machine 192.168.0.1 . R\u00e9sultat ![](data/ft2.png) Cela ne marche pas. Les paquets sont perdus. Temporairement, renommons la machine 192.168.1.2 en 192.168.0.33 . Testons \u00e0 nouveau le ping depuis la machine 192.168.0.1 . R\u00e9sultat ![](data/ft3.png) Cela marche. Les paquets sont bien achemin\u00e9s. Intuition : la notion de sous-r\u00e9seau n'est pas topologique (\u00abil suffit de relier les ordinateurs entre eux\u00bb) mais ob\u00e9it \u00e0 des r\u00e8gles num\u00e9riques.","title":"2. Un deuxi\u00e8me sous-r\u00e9seau"},{"location":"T3_Architecture_materielle/03_Architecture_reseau.html#3-un-vrai-reseau-contenant-deux-sous-reseaux-distincts-la-necessite-dun-routeur","text":"Notre solution initiale (relier les deux switchs par un cable pour unifier les deux sous-r\u00e9seaux) n'est pas viable \u00e0 l'\u00e9chelle d'un r\u00e9seau plan\u00e9taire. Pour que les machines de deux r\u00e9seaux diff\u00e9rents puissent \u00eatre connect\u00e9es, on va utiliser un dispositif \u00e9quip\u00e9 de deux cartes r\u00e9seaux , situ\u00e9 \u00e0 cheval entre les deux sous-r\u00e9seaux. Ce \u00e9quipement de r\u00e9seau est appel\u00e9 routeur ou passerelle .","title":"3. Un vrai r\u00e9seau contenant deux sous-r\u00e9seaux distincts : la n\u00e9cessit\u00e9 d'un routeur"},{"location":"T3_Architecture_materielle/04_Protocoles_de_communication.html","text":"Protocoles de communication dans un r\u00e9seau \u2693\ufe0e I. Mod\u00e8le OSI, mod\u00e8le Internet \u2693\ufe0e Les bits transmis d'un ordinateur \u00e0 un autre contiennent, en plus des donn\u00e9es utiles (le mot \u00abbonjour\u00bb dans un email), une multitude de donn\u00e9es (tout aussi utiles) qui vont aider \u00e0 l'acheminement de ces bits au bon endroit, puis au bon ordinateur, puis au bon logiciel. Les diff\u00e9rents protocoles qui r\u00e9gissent cette transmission sont regroup\u00e9s dans ce qui est appel\u00e9 un mod\u00e8le . Deux mod\u00e8les synth\u00e9tisent ces protocoles : - le mod\u00e8le Internet (ou mod\u00e8le TCP/IP , 1974), organis\u00e9 en 4 couches : liaison, r\u00e9seau, transport, application. - le mod\u00e8le OSI (Open Systems Interconnection, 1984), organis\u00e9 en 7 couches : physique, liaison, r\u00e9seau, transport, session, pr\u00e9sentation,application. Ces deux mod\u00e8les co\u00efncident suivant le sch\u00e9ma ci-dessus. Ce sont des mod\u00e8les th\u00e9oriques et d'une certaine rigidit\u00e9. Leur utilisation dans la pratique est parfois plus floue, avec des protocoles \u00e0 cheval sur plusieurs couches. Dans la suite de ce cours, nous \u00e9voquerons les couches par leur num\u00e9ro dans le mod\u00e8le OSI. Lors de son \u00e9mission, un message va subir successivement toutes les transformations effectu\u00e9es par chaque couche, depuis sa cr\u00e9ation (couche 7) jusqu'\u00e0 sa transmission physique (couche 1). Lorsque ce m\u00eame message sera r\u00e9ceptionn\u00e9, les transformations seront effectu\u00e9es dans l'ordre inverse, jusqu'\u00e0 la pr\u00e9sentation du message au destinataire. couches 7-6-5 \u2014 couches application-pr\u00e9sentation-session : Ces couches (r\u00e9unies dans le mod\u00e8le Internet en une couche unique \u00abapplication\u00bb ) regroupent les protocoles n\u00e9cessaires \u00e0 la bonne mise en forme d'un message (au sens large) avant sa transmission. Ces protocoles peuvent \u00eatre de nature tr\u00e8s diff\u00e9rente : protocole HTTP pour la transmisson de pages web, protocole FTP pour le transfert de fichiers, protocoles POP ou IMAP pour le courrier \u00e9lectronique... couche 4 \u2014 couche transport : Le protocole majeur de cette couche est le protocole TCP : il s'assure par SYN-ACK que l'\u00e9metteur et le r\u00e9cepteur sont pr\u00eats \u00e0 \u00e9changer des messages. il d\u00e9coupe en segments num\u00e9rot\u00e9s le message \u00e0 transmettre (c\u00f4t\u00e9 \u00e9metteur) ou bien recompose le message total en remettant les segments dans l'ordre (c\u00f4t\u00e9 r\u00e9cepteur). Les \u00e9l\u00e9ments \u00e9chang\u00e9s avec la couche inf\u00e9rieure sont des segments . couche 3 \u2014 couche r\u00e9seau : C'est la couche o\u00f9 chaque segment num\u00e9rot\u00e9 est encapsul\u00e9 dans un paquet qui, suivant le protocole IP, va contenir son adresse source et son adresse de destination. C'est \u00e0 ce niveau que se d\u00e9cide si le message doit rester dans le r\u00e9seau local ou \u00eatre envoy\u00e9 sur un autre r\u00e9seau via la passerelle du routeur. Les \u00e9l\u00e9ments \u00e9chang\u00e9s avec la couche inf\u00e9rieure sont des paquets . couche 2 \u2014 couche liaison : C'est l'encapsulation finale du message. Suivant le protocole Ethernet, les informations sont transmises d'une carte r\u00e9seau \u00e0 une autre, gr\u00e2ce \u00e0 leur adresse MAC (Media Access Controler). Les \u00e9l\u00e9ments \u00e9chang\u00e9s avec la couche inf\u00e9rieure sont des trames . couche 1 \u2014 couche physique : C'est la couche o\u00f9 le message est transmis physiquement d'un point \u00e0 un autre. Par signal lumineux (fibre optique), par ondes (wifi), par courant \u00e9lectrique (Ethernet)... Les \u00e9l\u00e9ments transmis sont les bits . Lors de son parcours, une trame peut \u00eatre partiellement d\u00e9capsul\u00e9e et remonter \u00e0 la couche 3, avant de redescendre et de continuer son chemin. C'est le cas notamment lors du passage dans un routeur. Mais jamais, lors de son acheminement, le contenu r\u00e9el du message n'est ouvert : les paquets transmis sont achemin\u00e9s de mani\u00e8re identique, qu'ils contiennent les \u00e9l\u00e9ments constitutifs d'une vid\u00e9o YouTube ou d'un email \u00e0 votre cousin. Ce principe fondateur, actuellement menac\u00e9 par certains acteurs politiques et industriels, est connu sous l'expression \u00abla neutralit\u00e9 du net\u00bb . II. Observation des trames avec Filius \u2693\ufe0e 1. Ping \u00e0 travers un switch \u2693\ufe0e Vous pouvez t\u00e9l\u00e9charger le fichier ping_switch.fls . Relions une machine 192.168.0.10 d'adresse MAC BC:81:81:42:9C:31 \u00e0 une machine 192.168.0.11 d'adresse MAC 2A:AB:AC:27:D6:A7 \u00e0 travers un switch. Observons la table SAT de notre switch : elle est vide, car aucune machine n'a encore cherch\u00e9 \u00e0 communiquer. Lan\u00e7ons un ping depuis 192.168.0.10 vers 192.168.0.11 et observons les donn\u00e9es \u00e9chang\u00e9es : Observons de plus pr\u00e8s la premi\u00e8re ligne de donn\u00e9es \u00e9chang\u00e9es. Cette premi\u00e8re ligne est une requ\u00eate ARP . ARP est un protocole qui s'interface entre la couche 3 / r\u00e9seau (appel\u00e9e dans la capture d'\u00e9cran Internet ) et la couche 2 / liaison (appel\u00e9e dans la capture d'\u00e9cran R\u00e9seau ). Comme indiqu\u00e9 dans le commentaire, elle consiste \u00e0 un appel \u00e0 tout le r\u00e9seau : \"Est-ce que quelqu'un ici poss\u00e8de l'IP 192.168.0.11 ? Message 1 : \u00ab Qui poss\u00e8de l'IP 192.168.0.11 ? \u00bb Il faut comprendre \u00e0 cette \u00e9tape que l'adresse IP est totalement inutile pour r\u00e9p\u00e9rer un ordinateur dans un sous-r\u00e9seau. Ce sont les adresses MAC qui permettent de se rep\u00e9rer dans un sous-r\u00e9seau. Les adresses IP, elles, permettront \u00e9ventuellement d'acheminer le message jusqu'au bon sous-r\u00e9seau (elles n'int\u00e9ressent donc que les routeurs). Revenons \u00e0 notre ping vers 192.168.0.11 . La commande arp -a effectu\u00e9e dans un terminal de la machine 192.168.0.10 nous permet de voir qu'elle ne conna\u00eet encore personne dans son sous-r\u00e9seau. La table de correspondance IP \u2b80 MAC ne contient que l'adresse de broadcast 255.255.255.255 , qui permet d'envoyer un message \u00e0 tout le r\u00e9seau. Constatant qu'elle ne sait pas quelle est l'adresse MAC de 192.168.0.11 , la machine 192.168.0.10 commence donc par envoyer un message \u00e0 tout le sous-r\u00e9seau, par l'adresse MAC de broadcast FF:FF:FF:FF:FF:FF . Le switch va lui aussi lui aussi relayer ce message \u00e0 tous les \u00e9quipements qui lui sont connect\u00e9s (dans notre cas, un seul ordinateur) Message 2 : \u00ab Moi ! \u00bb La machine 192.168.0.11 s'est reconnu dans le message de broadcast de la machine 192.168.0.10 . Elle lui r\u00e9pond pour lui donner son adresse MAC. \u00c0 partir de ce moment, la machine 192.168.0.10 sait comment communiquer avec 192.168.0.11 . Elle l'\u00e9crit dans sa table arp , afin de ne plus avoir \u00e0 \u00e9mettre le message n\u00b01 : Le switch, qui a vu passer sur ses ports 0 et 1 des messages venant des cartes MAC BC:81:81:42:9C:31 et 2A:AB:AC:27:D6:A7 , peut mettre \u00e0 jour sa table SAT : Par la suite, il saura sur quel port rediriger les messages destin\u00e9s \u00e0 ces deux adresses MAC. Un switch est un \u00e9quipement de r\u00e9seau de la couche 2 du mod\u00e8le OSI, il ne sait pas lire les adresses IP : il ne travaille qu'avec les adresses MAC. Message 3 : le ping est envoy\u00e9 Sch\u00e9matisons cette trame Ethernet (couche 2 du mod\u00e8le OSI) : Message 4 : le pong est retourn\u00e9 2. Ping \u00e0 travers un routeur \u2693\ufe0e Vous pouvez t\u00e9l\u00e9charger le fichier ping_routeur.fls . L'objectif est d'observer les diff\u00e9rentes trames lors d'un ping entre : - la machine 192.168.0.1 / 24 (adresse MAC F9:E1:D6:0B:29:03 ) et - la machine 192.168.1.1 / 24 (adresse MAC D3:79:96:B8:5C:A4 ) Le routeur est configur\u00e9 ainsi : - interface sur le r\u00e9seau A : - IP : 192.168.0.254 - MAC : 77:C2:22:C9:5C:E7 - interface sur le r\u00e9seau B : - IP : 192.168.1.254 - MAC : 66:E5:4E:7D:0B:B0 \u00c9tape 0 : le routeur signale sa pr\u00e9sence Lors de l'observation des messages re\u00e7us ou \u00e9mis par la machine 192.168.0.1 , on peut \u00eatre intrigu\u00e9 par ce tout premier message re\u00e7u, \u00e9mis par le routeur : On peut y distinguer les 4 couches du mod\u00e8le Internet. Le routeur, par ce message distribu\u00e9 \u00e0 tous les \u00e9l\u00e9ments du sous-r\u00e9seau A (il envoie un message \u00e9quivalent sur son sous-r\u00e9seau B), d\u00e9clare sa pr\u00e9sence, et le fait qu'il poss\u00e8de deux interfaces, une pour chaque r\u00e9seau. Il se positionne ainsi comme une passerelle : \u00abc'est par moi qu'il faudra passer si vous voulez sortir de votre sous-r\u00e9seau\u00bb. Dans cette trame envoy\u00e9e figure son adresse MAC, de sorte que tous les membres de son sous-r\u00e9seau pourront donc communiquer avec lui. \u00c9tape 1 : de 192.168.0.1 vers le routeur La machine 192.168.0.1 / 24 calcule que la machine 192.168.1.1 / 24 avec laquelle elle veut communiquer n'est pas dans son sous-r\u00e9seau (voir ce cours) . Elle va donc envoyer son message \u00e0 sa passerelle, qui est l'adresse du routeur dans son sous-r\u00e9seau. Cette premi\u00e8re trame est : \u00c9tape 2 : le routeur d\u00e9capsule la trame Le routeur est un \u00e9quipement de r\u00e9seau de couche 3 (couche r\u00e9seau). Il doit observer le contenu du paquet IP (sans remonter jusqu'au contenu du message) pour savoir, suivant le proc\u00e9d\u00e9 de routage (voir cours de Terminale), o\u00f9 acheminer ce paquet. Dans notre cas, l'adresse IP 192.168.1.1 de destination lui est accessible : elle fait partie de son sous-r\u00e9seau B. Le routeur va modifier la valeur du TTL (Time To Live), en la d\u00e9cr\u00e9mentant de 1. Si, apr\u00e8s de multiples routages, cette valeur devenait \u00e9gale \u00e0 0, ce paquet serait d\u00e9truit. Ceci a pour but d'\u00e9viter l'encombrement des r\u00e9seaux avec des paquets ne trouvant pas leur destination. Remarque : dans notre cas, le routeur va laisser intacte l'adresse IP Source. Ce n'est pas toujours le cas. Dans le cas classique de la box qui relie votre domicile \u00e0 internet, le routeur contenu dans celle-ci va remplacer l'adresse locale de votre ordinateur ou smartphone (ex 192.168.0.26 ) par son IP publique (celle apparaissant sur whatsmyip.com , par exemple). Elle effectue ce qu'on appelle une translation d'adresse (NAT). Pourquoi ? Parce que sinon la r\u00e9ponse du serveur distant que vous interrogez serait envoy\u00e9e sur une adresse locale (votre adresse 192.168.0.26 ), qui est introuvable depuis un r\u00e9seau ext\u00e9rieur. Il faut donc remplacer toutes les adresses locales par l'IP publique de votre box. Pour \u00e9viter que la r\u00e9ponse du serveur web que vous avez interrog\u00e9 ne soit affich\u00e9e sur l'ordinateur de vos parents, le routeur affecte des ports diff\u00e9rents \u00e0 chaque machine de son sous-r\u00e9seau. Ce port est inclus dans le message transmis au serveur, et il l'est aussi dans sa r\u00e9ponse : le routeur peut donc rediriger le trafic vers la bonne machine du sous-r\u00e9seau. Le routeur va r\u00e9-encapsuler le paquet IP modifi\u00e9, et cr\u00e9er une nouvelle trame Ethernet en modifiant : - l'adresse MAC source : il va mettre l'adresse MAC de son interface dans le sous-r\u00e9seau B. - l'adresse MAC de destination : il va mettre l'adresse MAC de 192.168.1.1 (qu'il aura peut-\u00eatre r\u00e9cup\u00e9r\u00e9e au pr\u00e9alable par le protocole ARP) Cette deuxi\u00e8me trame est donc : On peut observer dans Filius cette trame, en se positionnant sur l'interface 192.168.1.254 du routeur, ou sur 192.168.1.1 : En suivant le m\u00eame principe, la machine 192.168.1.1 pourra envoyer son pong . III. Protocole du bit altern\u00e9 \u2693\ufe0e Ce protocole est un exemple simple de fiabilisation du transfert de donn\u00e9es. 1. Contexte \u2693\ufe0e Alice veut envoyer \u00e0 Bob un message M, qu'elle a pr\u00e9d\u00e9coup\u00e9 en sous-messages M0, M1, M2,... Alice envoie ses sous-messages \u00e0 une cadence \u0394t fix\u00e9e (en pratique, les sous-messages partent quand leur acquittement a \u00e9t\u00e9 re\u00e7u ou qu'on a attendu celui-ci trop longtemps : on parle alors de timeout ) 2. Situation id\u00e9ale \u2693\ufe0e Dans cette situation, les sous-messages arrivent tous \u00e0 destination dans le bon ordre. La transmission est correcte. 3. Situation r\u00e9elle \u2693\ufe0e Mais parfois, les choses ne se passent pas toujours aussi bien. Car si on ma\u00eetrise parfaitement le timing de l'envoi des sous-messages d'Alice, on ne sait pas combien de temps vont mettre ces sous-messages pour arriver, ni m\u00eame (attention je vais passer dans un tunnel) s'ils ne vont pas \u00eatre d\u00e9truits en route. Le sous-message M0 est arriv\u00e9 apr\u00e8s le M1, le message M2 n'est jamais arriv\u00e9... Que faire ? \u00c9cartons l'id\u00e9e de num\u00e9roter les sous-messages, afin que Bob puisse remettre dans l'ordre les messages arriv\u00e9s, ou m\u00eame redemander sp\u00e9cifiquement des sous-messages perdus. C'est ce que r\u00e9alise le protocole TCP (couche 4 \u2014 transport), c'est tr\u00e8s efficace, mais cher en ressources. Essayons de trouver une solution plus basique. 3. Solution na\u00efve... \u2693\ufe0e Pourquoi ne pas demander \u00e0 Bob d'envoyer un signal pour dire \u00e0 Alice qu'il vient bien de recevoir son sous-message ? Nous appelerons ce signal ACK (comme acknowledgement , traduisible par \u00abaccus\u00e9 de r\u00e9ception\u00bb). Ce signal ACK permettra \u00e0 Alice de renvoyer un message qu'elle consid\u00e9rera comme perdu : N'ayant pas re\u00e7u le ACK cons\u00e9cutif \u00e0 son message M1, Alice suppose (avec raison) que ce message n'est pas parvenu jusqu'\u00e0 Bob, et donc renvoie le message M1. 4. Mais peu efficace... \u2693\ufe0e Le deuxi\u00e8me ACK de Bob a mis trop de temps pour arriver (ou s'est perdu en route) et donc Alice a suppos\u00e9 que son sous-message M1 n'\u00e9tait pas arriv\u00e9. Elle l'a donc renvoy\u00e9, et Bob se retrouve avec deux fois le sous-message M1. La transmission est incorrecte. En faisant transiter un message entre Bob et Alice, nous multiplions par 2 la probabilit\u00e9 que des probl\u00e8mes techniques de transmission interviennent. Et pour l'instant rien ne nous permet de les d\u00e9tecter. 5. Bob prend le contr\u00f4le \u2693\ufe0e Bob va maintenant int\u00e9grer une m\u00e9thode de validation du sous-message re\u00e7u. Il pourra d\u00e9cider de le garder ou de l'\u00e9carter. Le but est d'\u00e9viter les doublons. Pour r\u00e9aliser ceci, Alice va rajouter \u00e0 chacun de ses sous-messages un bit de contr\u00f4le, que nous appelerons FLAG (drapeau). Au d\u00e9part, ce FLAG vaut 0. Quand Bob re\u00e7oit un FLAG, il renvoie un ACK \u00e9gal au FLAG re\u00e7u . Alice va attendre ce ACK contenant le m\u00eame bit que son dernier FLAG envoy\u00e9 : - tant qu'elle ne l'aura pas re\u00e7u, elle continuera \u00e0 envoyer le m\u00eame sous-message, avec le m\u00eame FLAG . - d\u00e8s qu'elle l'a re\u00e7u, elle peut envoyer un nouveau sous-message en inversant (\u00abalternant\u00bb) le bit de son dernier FLAG (d'o\u00f9 le nom de ce protocole). Bob, de son c\u00f4t\u00e9, va contr\u00f4ler la validit\u00e9 de ce qu'il re\u00e7oit : il ne gardera que les sous-messages dont le FLAG est \u00e9gal \u00e0 l'inverse de son dernier ACK . C'est cette m\u00e9thode qui lui permettra d'\u00e9carter les doublons. Observons ce protocole dans plusieurs cas : 5.1 Cas o\u00f9 le sous-message est perdu \u2693\ufe0e 5.2 Cas o\u00f9 le ACK est perdu \u2693\ufe0e Le protocole a bien d\u00e9tect\u00e9 le doublon du sous-message M1. 5.3 Cas o\u00f9 un sous-message est en retard \u2693\ufe0e Le protocole a bien d\u00e9tect\u00e9 le doublon du sous-message M1... mais que se passerait-il si notre premier sous-message M1 \u00e9tait encore plus en retard ? 6. Conclusion \u2693\ufe0e Le protocole du bit altern\u00e9 a longtemps \u00e9t\u00e9 utilis\u00e9 au sein de la couche 2 du mod\u00e8le OSI (distribution des trames Ethernet). Simple et l\u00e9ger, il peut toutefois \u00eatre facilement mis en d\u00e9faut, ce qui explique qu'il ait \u00e9t\u00e9 remplac\u00e9 par des protocoles plus performants. Bibliographie - Num\u00e9rique et Sciences Informatiques, 1re, T. BALABONSKI, S. CONCHON, J.-C. FILLIATRE, K. NGUYEN, \u00e9ditions ELLIPSES. - Pr\u00e9pabac NSI 1\u00e8re, C.ADOBET, G.CONNAN, G. ROZSAVOLGYI, L.SIGNAC, \u00e9ditions Hatier. G.Lassus, Lyc\u00e9e Fran\u00e7ois Mauriac -- Bordeaux","title":"Protocoles de communication dans un r\u00e9seau"},{"location":"T3_Architecture_materielle/04_Protocoles_de_communication.html#protocoles-de-communication-dans-un-reseau","text":"","title":"Protocoles de communication dans un r\u00e9seau"},{"location":"T3_Architecture_materielle/04_Protocoles_de_communication.html#i-modele-osi-modele-internet","text":"Les bits transmis d'un ordinateur \u00e0 un autre contiennent, en plus des donn\u00e9es utiles (le mot \u00abbonjour\u00bb dans un email), une multitude de donn\u00e9es (tout aussi utiles) qui vont aider \u00e0 l'acheminement de ces bits au bon endroit, puis au bon ordinateur, puis au bon logiciel. Les diff\u00e9rents protocoles qui r\u00e9gissent cette transmission sont regroup\u00e9s dans ce qui est appel\u00e9 un mod\u00e8le . Deux mod\u00e8les synth\u00e9tisent ces protocoles : - le mod\u00e8le Internet (ou mod\u00e8le TCP/IP , 1974), organis\u00e9 en 4 couches : liaison, r\u00e9seau, transport, application. - le mod\u00e8le OSI (Open Systems Interconnection, 1984), organis\u00e9 en 7 couches : physique, liaison, r\u00e9seau, transport, session, pr\u00e9sentation,application. Ces deux mod\u00e8les co\u00efncident suivant le sch\u00e9ma ci-dessus. Ce sont des mod\u00e8les th\u00e9oriques et d'une certaine rigidit\u00e9. Leur utilisation dans la pratique est parfois plus floue, avec des protocoles \u00e0 cheval sur plusieurs couches. Dans la suite de ce cours, nous \u00e9voquerons les couches par leur num\u00e9ro dans le mod\u00e8le OSI. Lors de son \u00e9mission, un message va subir successivement toutes les transformations effectu\u00e9es par chaque couche, depuis sa cr\u00e9ation (couche 7) jusqu'\u00e0 sa transmission physique (couche 1). Lorsque ce m\u00eame message sera r\u00e9ceptionn\u00e9, les transformations seront effectu\u00e9es dans l'ordre inverse, jusqu'\u00e0 la pr\u00e9sentation du message au destinataire. couches 7-6-5 \u2014 couches application-pr\u00e9sentation-session : Ces couches (r\u00e9unies dans le mod\u00e8le Internet en une couche unique \u00abapplication\u00bb ) regroupent les protocoles n\u00e9cessaires \u00e0 la bonne mise en forme d'un message (au sens large) avant sa transmission. Ces protocoles peuvent \u00eatre de nature tr\u00e8s diff\u00e9rente : protocole HTTP pour la transmisson de pages web, protocole FTP pour le transfert de fichiers, protocoles POP ou IMAP pour le courrier \u00e9lectronique... couche 4 \u2014 couche transport : Le protocole majeur de cette couche est le protocole TCP : il s'assure par SYN-ACK que l'\u00e9metteur et le r\u00e9cepteur sont pr\u00eats \u00e0 \u00e9changer des messages. il d\u00e9coupe en segments num\u00e9rot\u00e9s le message \u00e0 transmettre (c\u00f4t\u00e9 \u00e9metteur) ou bien recompose le message total en remettant les segments dans l'ordre (c\u00f4t\u00e9 r\u00e9cepteur). Les \u00e9l\u00e9ments \u00e9chang\u00e9s avec la couche inf\u00e9rieure sont des segments . couche 3 \u2014 couche r\u00e9seau : C'est la couche o\u00f9 chaque segment num\u00e9rot\u00e9 est encapsul\u00e9 dans un paquet qui, suivant le protocole IP, va contenir son adresse source et son adresse de destination. C'est \u00e0 ce niveau que se d\u00e9cide si le message doit rester dans le r\u00e9seau local ou \u00eatre envoy\u00e9 sur un autre r\u00e9seau via la passerelle du routeur. Les \u00e9l\u00e9ments \u00e9chang\u00e9s avec la couche inf\u00e9rieure sont des paquets . couche 2 \u2014 couche liaison : C'est l'encapsulation finale du message. Suivant le protocole Ethernet, les informations sont transmises d'une carte r\u00e9seau \u00e0 une autre, gr\u00e2ce \u00e0 leur adresse MAC (Media Access Controler). Les \u00e9l\u00e9ments \u00e9chang\u00e9s avec la couche inf\u00e9rieure sont des trames . couche 1 \u2014 couche physique : C'est la couche o\u00f9 le message est transmis physiquement d'un point \u00e0 un autre. Par signal lumineux (fibre optique), par ondes (wifi), par courant \u00e9lectrique (Ethernet)... Les \u00e9l\u00e9ments transmis sont les bits . Lors de son parcours, une trame peut \u00eatre partiellement d\u00e9capsul\u00e9e et remonter \u00e0 la couche 3, avant de redescendre et de continuer son chemin. C'est le cas notamment lors du passage dans un routeur. Mais jamais, lors de son acheminement, le contenu r\u00e9el du message n'est ouvert : les paquets transmis sont achemin\u00e9s de mani\u00e8re identique, qu'ils contiennent les \u00e9l\u00e9ments constitutifs d'une vid\u00e9o YouTube ou d'un email \u00e0 votre cousin. Ce principe fondateur, actuellement menac\u00e9 par certains acteurs politiques et industriels, est connu sous l'expression \u00abla neutralit\u00e9 du net\u00bb .","title":"I. Mod\u00e8le OSI, mod\u00e8le Internet"},{"location":"T3_Architecture_materielle/04_Protocoles_de_communication.html#ii-observation-des-trames-avec-filius","text":"","title":"II. Observation des trames avec Filius"},{"location":"T3_Architecture_materielle/04_Protocoles_de_communication.html#1-ping-a-travers-un-switch","text":"Vous pouvez t\u00e9l\u00e9charger le fichier ping_switch.fls . Relions une machine 192.168.0.10 d'adresse MAC BC:81:81:42:9C:31 \u00e0 une machine 192.168.0.11 d'adresse MAC 2A:AB:AC:27:D6:A7 \u00e0 travers un switch. Observons la table SAT de notre switch : elle est vide, car aucune machine n'a encore cherch\u00e9 \u00e0 communiquer. Lan\u00e7ons un ping depuis 192.168.0.10 vers 192.168.0.11 et observons les donn\u00e9es \u00e9chang\u00e9es : Observons de plus pr\u00e8s la premi\u00e8re ligne de donn\u00e9es \u00e9chang\u00e9es. Cette premi\u00e8re ligne est une requ\u00eate ARP . ARP est un protocole qui s'interface entre la couche 3 / r\u00e9seau (appel\u00e9e dans la capture d'\u00e9cran Internet ) et la couche 2 / liaison (appel\u00e9e dans la capture d'\u00e9cran R\u00e9seau ). Comme indiqu\u00e9 dans le commentaire, elle consiste \u00e0 un appel \u00e0 tout le r\u00e9seau : \"Est-ce que quelqu'un ici poss\u00e8de l'IP 192.168.0.11 ? Message 1 : \u00ab Qui poss\u00e8de l'IP 192.168.0.11 ? \u00bb Il faut comprendre \u00e0 cette \u00e9tape que l'adresse IP est totalement inutile pour r\u00e9p\u00e9rer un ordinateur dans un sous-r\u00e9seau. Ce sont les adresses MAC qui permettent de se rep\u00e9rer dans un sous-r\u00e9seau. Les adresses IP, elles, permettront \u00e9ventuellement d'acheminer le message jusqu'au bon sous-r\u00e9seau (elles n'int\u00e9ressent donc que les routeurs). Revenons \u00e0 notre ping vers 192.168.0.11 . La commande arp -a effectu\u00e9e dans un terminal de la machine 192.168.0.10 nous permet de voir qu'elle ne conna\u00eet encore personne dans son sous-r\u00e9seau. La table de correspondance IP \u2b80 MAC ne contient que l'adresse de broadcast 255.255.255.255 , qui permet d'envoyer un message \u00e0 tout le r\u00e9seau. Constatant qu'elle ne sait pas quelle est l'adresse MAC de 192.168.0.11 , la machine 192.168.0.10 commence donc par envoyer un message \u00e0 tout le sous-r\u00e9seau, par l'adresse MAC de broadcast FF:FF:FF:FF:FF:FF . Le switch va lui aussi lui aussi relayer ce message \u00e0 tous les \u00e9quipements qui lui sont connect\u00e9s (dans notre cas, un seul ordinateur) Message 2 : \u00ab Moi ! \u00bb La machine 192.168.0.11 s'est reconnu dans le message de broadcast de la machine 192.168.0.10 . Elle lui r\u00e9pond pour lui donner son adresse MAC. \u00c0 partir de ce moment, la machine 192.168.0.10 sait comment communiquer avec 192.168.0.11 . Elle l'\u00e9crit dans sa table arp , afin de ne plus avoir \u00e0 \u00e9mettre le message n\u00b01 : Le switch, qui a vu passer sur ses ports 0 et 1 des messages venant des cartes MAC BC:81:81:42:9C:31 et 2A:AB:AC:27:D6:A7 , peut mettre \u00e0 jour sa table SAT : Par la suite, il saura sur quel port rediriger les messages destin\u00e9s \u00e0 ces deux adresses MAC. Un switch est un \u00e9quipement de r\u00e9seau de la couche 2 du mod\u00e8le OSI, il ne sait pas lire les adresses IP : il ne travaille qu'avec les adresses MAC. Message 3 : le ping est envoy\u00e9 Sch\u00e9matisons cette trame Ethernet (couche 2 du mod\u00e8le OSI) : Message 4 : le pong est retourn\u00e9","title":"1. Ping \u00e0 travers un switch"},{"location":"T3_Architecture_materielle/04_Protocoles_de_communication.html#2-ping-a-travers-un-routeur","text":"Vous pouvez t\u00e9l\u00e9charger le fichier ping_routeur.fls . L'objectif est d'observer les diff\u00e9rentes trames lors d'un ping entre : - la machine 192.168.0.1 / 24 (adresse MAC F9:E1:D6:0B:29:03 ) et - la machine 192.168.1.1 / 24 (adresse MAC D3:79:96:B8:5C:A4 ) Le routeur est configur\u00e9 ainsi : - interface sur le r\u00e9seau A : - IP : 192.168.0.254 - MAC : 77:C2:22:C9:5C:E7 - interface sur le r\u00e9seau B : - IP : 192.168.1.254 - MAC : 66:E5:4E:7D:0B:B0 \u00c9tape 0 : le routeur signale sa pr\u00e9sence Lors de l'observation des messages re\u00e7us ou \u00e9mis par la machine 192.168.0.1 , on peut \u00eatre intrigu\u00e9 par ce tout premier message re\u00e7u, \u00e9mis par le routeur : On peut y distinguer les 4 couches du mod\u00e8le Internet. Le routeur, par ce message distribu\u00e9 \u00e0 tous les \u00e9l\u00e9ments du sous-r\u00e9seau A (il envoie un message \u00e9quivalent sur son sous-r\u00e9seau B), d\u00e9clare sa pr\u00e9sence, et le fait qu'il poss\u00e8de deux interfaces, une pour chaque r\u00e9seau. Il se positionne ainsi comme une passerelle : \u00abc'est par moi qu'il faudra passer si vous voulez sortir de votre sous-r\u00e9seau\u00bb. Dans cette trame envoy\u00e9e figure son adresse MAC, de sorte que tous les membres de son sous-r\u00e9seau pourront donc communiquer avec lui. \u00c9tape 1 : de 192.168.0.1 vers le routeur La machine 192.168.0.1 / 24 calcule que la machine 192.168.1.1 / 24 avec laquelle elle veut communiquer n'est pas dans son sous-r\u00e9seau (voir ce cours) . Elle va donc envoyer son message \u00e0 sa passerelle, qui est l'adresse du routeur dans son sous-r\u00e9seau. Cette premi\u00e8re trame est : \u00c9tape 2 : le routeur d\u00e9capsule la trame Le routeur est un \u00e9quipement de r\u00e9seau de couche 3 (couche r\u00e9seau). Il doit observer le contenu du paquet IP (sans remonter jusqu'au contenu du message) pour savoir, suivant le proc\u00e9d\u00e9 de routage (voir cours de Terminale), o\u00f9 acheminer ce paquet. Dans notre cas, l'adresse IP 192.168.1.1 de destination lui est accessible : elle fait partie de son sous-r\u00e9seau B. Le routeur va modifier la valeur du TTL (Time To Live), en la d\u00e9cr\u00e9mentant de 1. Si, apr\u00e8s de multiples routages, cette valeur devenait \u00e9gale \u00e0 0, ce paquet serait d\u00e9truit. Ceci a pour but d'\u00e9viter l'encombrement des r\u00e9seaux avec des paquets ne trouvant pas leur destination. Remarque : dans notre cas, le routeur va laisser intacte l'adresse IP Source. Ce n'est pas toujours le cas. Dans le cas classique de la box qui relie votre domicile \u00e0 internet, le routeur contenu dans celle-ci va remplacer l'adresse locale de votre ordinateur ou smartphone (ex 192.168.0.26 ) par son IP publique (celle apparaissant sur whatsmyip.com , par exemple). Elle effectue ce qu'on appelle une translation d'adresse (NAT). Pourquoi ? Parce que sinon la r\u00e9ponse du serveur distant que vous interrogez serait envoy\u00e9e sur une adresse locale (votre adresse 192.168.0.26 ), qui est introuvable depuis un r\u00e9seau ext\u00e9rieur. Il faut donc remplacer toutes les adresses locales par l'IP publique de votre box. Pour \u00e9viter que la r\u00e9ponse du serveur web que vous avez interrog\u00e9 ne soit affich\u00e9e sur l'ordinateur de vos parents, le routeur affecte des ports diff\u00e9rents \u00e0 chaque machine de son sous-r\u00e9seau. Ce port est inclus dans le message transmis au serveur, et il l'est aussi dans sa r\u00e9ponse : le routeur peut donc rediriger le trafic vers la bonne machine du sous-r\u00e9seau. Le routeur va r\u00e9-encapsuler le paquet IP modifi\u00e9, et cr\u00e9er une nouvelle trame Ethernet en modifiant : - l'adresse MAC source : il va mettre l'adresse MAC de son interface dans le sous-r\u00e9seau B. - l'adresse MAC de destination : il va mettre l'adresse MAC de 192.168.1.1 (qu'il aura peut-\u00eatre r\u00e9cup\u00e9r\u00e9e au pr\u00e9alable par le protocole ARP) Cette deuxi\u00e8me trame est donc : On peut observer dans Filius cette trame, en se positionnant sur l'interface 192.168.1.254 du routeur, ou sur 192.168.1.1 : En suivant le m\u00eame principe, la machine 192.168.1.1 pourra envoyer son pong .","title":"2. Ping \u00e0 travers un routeur"},{"location":"T3_Architecture_materielle/04_Protocoles_de_communication.html#iii-protocole-du-bit-alterne","text":"Ce protocole est un exemple simple de fiabilisation du transfert de donn\u00e9es.","title":"III. Protocole du bit altern\u00e9"},{"location":"T3_Architecture_materielle/04_Protocoles_de_communication.html#1-contexte","text":"Alice veut envoyer \u00e0 Bob un message M, qu'elle a pr\u00e9d\u00e9coup\u00e9 en sous-messages M0, M1, M2,... Alice envoie ses sous-messages \u00e0 une cadence \u0394t fix\u00e9e (en pratique, les sous-messages partent quand leur acquittement a \u00e9t\u00e9 re\u00e7u ou qu'on a attendu celui-ci trop longtemps : on parle alors de timeout )","title":"1. Contexte"},{"location":"T3_Architecture_materielle/04_Protocoles_de_communication.html#2-situation-ideale","text":"Dans cette situation, les sous-messages arrivent tous \u00e0 destination dans le bon ordre. La transmission est correcte.","title":"2. Situation id\u00e9ale"},{"location":"T3_Architecture_materielle/04_Protocoles_de_communication.html#3-situation-reelle","text":"Mais parfois, les choses ne se passent pas toujours aussi bien. Car si on ma\u00eetrise parfaitement le timing de l'envoi des sous-messages d'Alice, on ne sait pas combien de temps vont mettre ces sous-messages pour arriver, ni m\u00eame (attention je vais passer dans un tunnel) s'ils ne vont pas \u00eatre d\u00e9truits en route. Le sous-message M0 est arriv\u00e9 apr\u00e8s le M1, le message M2 n'est jamais arriv\u00e9... Que faire ? \u00c9cartons l'id\u00e9e de num\u00e9roter les sous-messages, afin que Bob puisse remettre dans l'ordre les messages arriv\u00e9s, ou m\u00eame redemander sp\u00e9cifiquement des sous-messages perdus. C'est ce que r\u00e9alise le protocole TCP (couche 4 \u2014 transport), c'est tr\u00e8s efficace, mais cher en ressources. Essayons de trouver une solution plus basique.","title":"3. Situation r\u00e9elle"},{"location":"T3_Architecture_materielle/04_Protocoles_de_communication.html#3-solution-naive","text":"Pourquoi ne pas demander \u00e0 Bob d'envoyer un signal pour dire \u00e0 Alice qu'il vient bien de recevoir son sous-message ? Nous appelerons ce signal ACK (comme acknowledgement , traduisible par \u00abaccus\u00e9 de r\u00e9ception\u00bb). Ce signal ACK permettra \u00e0 Alice de renvoyer un message qu'elle consid\u00e9rera comme perdu : N'ayant pas re\u00e7u le ACK cons\u00e9cutif \u00e0 son message M1, Alice suppose (avec raison) que ce message n'est pas parvenu jusqu'\u00e0 Bob, et donc renvoie le message M1.","title":"3. Solution na\u00efve..."},{"location":"T3_Architecture_materielle/04_Protocoles_de_communication.html#4-mais-peu-efficace","text":"Le deuxi\u00e8me ACK de Bob a mis trop de temps pour arriver (ou s'est perdu en route) et donc Alice a suppos\u00e9 que son sous-message M1 n'\u00e9tait pas arriv\u00e9. Elle l'a donc renvoy\u00e9, et Bob se retrouve avec deux fois le sous-message M1. La transmission est incorrecte. En faisant transiter un message entre Bob et Alice, nous multiplions par 2 la probabilit\u00e9 que des probl\u00e8mes techniques de transmission interviennent. Et pour l'instant rien ne nous permet de les d\u00e9tecter.","title":"4. Mais peu efficace..."},{"location":"T3_Architecture_materielle/04_Protocoles_de_communication.html#5-bob-prend-le-controle","text":"Bob va maintenant int\u00e9grer une m\u00e9thode de validation du sous-message re\u00e7u. Il pourra d\u00e9cider de le garder ou de l'\u00e9carter. Le but est d'\u00e9viter les doublons. Pour r\u00e9aliser ceci, Alice va rajouter \u00e0 chacun de ses sous-messages un bit de contr\u00f4le, que nous appelerons FLAG (drapeau). Au d\u00e9part, ce FLAG vaut 0. Quand Bob re\u00e7oit un FLAG, il renvoie un ACK \u00e9gal au FLAG re\u00e7u . Alice va attendre ce ACK contenant le m\u00eame bit que son dernier FLAG envoy\u00e9 : - tant qu'elle ne l'aura pas re\u00e7u, elle continuera \u00e0 envoyer le m\u00eame sous-message, avec le m\u00eame FLAG . - d\u00e8s qu'elle l'a re\u00e7u, elle peut envoyer un nouveau sous-message en inversant (\u00abalternant\u00bb) le bit de son dernier FLAG (d'o\u00f9 le nom de ce protocole). Bob, de son c\u00f4t\u00e9, va contr\u00f4ler la validit\u00e9 de ce qu'il re\u00e7oit : il ne gardera que les sous-messages dont le FLAG est \u00e9gal \u00e0 l'inverse de son dernier ACK . C'est cette m\u00e9thode qui lui permettra d'\u00e9carter les doublons. Observons ce protocole dans plusieurs cas :","title":"5. Bob prend le contr\u00f4le"},{"location":"T3_Architecture_materielle/04_Protocoles_de_communication.html#6-conclusion","text":"Le protocole du bit altern\u00e9 a longtemps \u00e9t\u00e9 utilis\u00e9 au sein de la couche 2 du mod\u00e8le OSI (distribution des trames Ethernet). Simple et l\u00e9ger, il peut toutefois \u00eatre facilement mis en d\u00e9faut, ce qui explique qu'il ait \u00e9t\u00e9 remplac\u00e9 par des protocoles plus performants. Bibliographie - Num\u00e9rique et Sciences Informatiques, 1re, T. BALABONSKI, S. CONCHON, J.-C. FILLIATRE, K. NGUYEN, \u00e9ditions ELLIPSES. - Pr\u00e9pabac NSI 1\u00e8re, C.ADOBET, G.CONNAN, G. ROZSAVOLGYI, L.SIGNAC, \u00e9ditions Hatier. G.Lassus, Lyc\u00e9e Fran\u00e7ois Mauriac -- Bordeaux","title":"6. Conclusion"},{"location":"T3_Architecture_materielle/05_Decouverte_des_commandes_Linux.html","text":"D\u00e9couverte des commandes UNIX \u2693\ufe0e \u00e0 partir du jeu Terminus Rendez-vous \u00e0 l'adresse http://luffah.xyz/bidules/Terminus/ Laissez-vous guider par le jeu, mais attention ! - vous devez noter sur un papier chaque nouvelle commande que vous apprenez. Vous pouvez par exemple construire un tableau de ce type : je vous conseille tr\u00e8s fortement d'\u00e9crire un plan du jeu au fur et \u00e0 mesure que vous avancez dans votre qu\u00eate. Par exemple : Correction \u2693\ufe0e Voici un corrig\u00e9 \u00e9tabli par Charles Poulmaire, de l'acad\u00e9mie de Versailles.","title":"D\u00e9couverte des commandes UNIX"},{"location":"T3_Architecture_materielle/05_Decouverte_des_commandes_Linux.html#decouverte-des-commandes-unix","text":"\u00e0 partir du jeu Terminus Rendez-vous \u00e0 l'adresse http://luffah.xyz/bidules/Terminus/ Laissez-vous guider par le jeu, mais attention ! - vous devez noter sur un papier chaque nouvelle commande que vous apprenez. Vous pouvez par exemple construire un tableau de ce type : je vous conseille tr\u00e8s fortement d'\u00e9crire un plan du jeu au fur et \u00e0 mesure que vous avancez dans votre qu\u00eate. Par exemple :","title":"D\u00e9couverte des commandes UNIX"},{"location":"T3_Architecture_materielle/05_Decouverte_des_commandes_Linux.html#correction","text":"Voici un corrig\u00e9 \u00e9tabli par Charles Poulmaire, de l'acad\u00e9mie de Versailles.","title":"Correction"},{"location":"T6_IHM_Web/01_Interactions_page_web.html","text":"Pages web et interactions \u2693\ufe0e 1. Le cas le plus simple : la m\u00eame page pour tout le monde \u2693\ufe0e Nous allons tout d'abord consid\u00e9rer le cas o\u00f9 le serveur renvoie une page unique, identique pour tous les utilisateurs. De plus, l'utilisateur ne pourra pas agir sur sa page : il n'y a aucune interactivit\u00e9. Exemple de page statique c\u00f4t\u00e9 serveur et c\u00f4t\u00e9 utilisateur : - cette merveille de page web. - plus compl\u00e8te, mais tout aussi statique : cette page Wikipedia consacr\u00e9e \u00e0 John Conway. 1.1 HTML pur \u2693\ufe0e Lorsque le client demande au serveur le contenu d'une page web, celui-ci lui renvoie, dans le cas le plus simple, une simple page html. HTML est un langage dit \u00ab \u00e0 balises \u00bb. Ce n'est pas \u00e0 proprement parler un langage de programmation, mais plut\u00f4t un langage de description de contenu. Il a \u00e9t\u00e9 invent\u00e9 en 1992 par Tim Berners-Lee . La version actuellement utilis\u00e9e est le html5 . Exemple de page web minimale 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 <!DOCTYPE html> < html lang = 'fr' > < head > < meta charset = \"utf-8\" > < title > Un titre tr\u00e8s original </ title > </ head > < body > < p > Ceci est le texte introductif de ma page. </ p > < p > < h1 > Ceci est un titre de niveau 1 </ h1 > Mais sans rien d'int\u00e9ressant. < h2 > Ceci est un titre de niveau 2 </ h2 > < ul > < li > le d\u00e9but d'une liste indent\u00e9e </ li > < li > la suite ... </ li > </ ul > Pour apprendre le fonctionnement des balises, voir < a href = \"https://developer.mozilla.org/fr/docs/Apprendre/HTML/Introduction_%C3%A0_HTML/Getting_started\" > ici </ a > par exemple ! </ p > </ body > </ html > Vous pouvez contempler ici le rendu de cette magnifique page. Exercice 1 \u2693\ufe0e Cr\u00e9ez un dossier contenant un fichier mapage.html . Cr\u00e9ez une page contenant une image et un lien vers le site du lyc\u00e9e. Vous pouvez aussi utiliser un \u00e9diteur en ligne avec rendu instantan\u00e9, du type https://www.w3schools.com/tryit/ 1.2 HTML + CSS \u2693\ufe0e L'acronyme CSS signifie Cascading Style Sheets . L'id\u00e9e est de regrouper dans un seul fichier toutes les informations relatives \u00e0 la mise en forme des \u00e9l\u00e9ments de la page html. De mani\u00e8re tr\u00e8s simplifi\u00e9e, on peut dire que le fichier html s'occupe du fond tandis que le fichier css s'occupe de la forme . Le fichier CSS (souvent nomm\u00e9 style.css ) doit \u00eatre r\u00e9f\u00e9renc\u00e9 au d\u00e9but du fichier html , au sein de la balise <head> . Exemple minimal de couple html / css : fichier index.html : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <!DOCTYPE html> < html > < head > < meta charset = \"utf-8\" > < title > page test </ title > < link href = \"style.css\" rel = \"stylesheet\" type = \"text/css\" /> </ head > < body > < p > < h1 > Ceci est un titre de niveau 1 </ h1 > Mais sans rien d'int\u00e9ressant. < h2 > Ceci est un titre de niveau 2 </ h2 > </ p > </ body > </ html > fichier style.css : 1 2 3 4 5 6 7 8 9 html { font-size : 15 px ; font-family : sans-serif ; background-color : lightgray ; } h1 { color : red ; } Vous pouvez contempler \u00e0 l'adresse https://exemplehtmlcss--g-lassus.repl.co le nouveau rendu de cette encore plus magnifique page. En savoir plus - le cours d'OpenClassrooms : https://openclassrooms.com/fr/courses/1603881-apprenez-a-creer-votre-site-web-avec-html5-et-css3 Exercice 2 \u2693\ufe0e Reprenez votre page de l'exercice 1 et rajoutez une feuille de style. Exercice 3 \u2693\ufe0e Allez sur le site http://sudouest.fr, et affichez l'inspecteur d'\u00e9lement de votre navigateur (g\u00e9n\u00e9ralement accessible en appuyant sur F12 ) Modifiez le plus possible les attributs de style de la page. 2. Quand le client peut agir sur sa page : exemple avec JavaScript \u2693\ufe0e Jusqu'\u00e0 pr\u00e9sent, la page web envoy\u00e9e par le serveur est : 1. identique quel que soit le client. 2. statique apr\u00e8s r\u00e9ception sur l'ordinateur du client. Le JavaScript va venir r\u00e9gler le probl\u00e8me n\u00b02 : il est possible de fabriquer une page sur laquelle le client va pouvoir agir localement , sans avoir \u00e0 redemander une nouvelle page au serveur. Invent\u00e9 en 1995 par Brendan Eich pour le navigateur Netscape, le langage JavaScript s'est impos\u00e9 comme la norme aupr\u00e8s de tous les navigateurs pour apporter de l'interactivit\u00e9 aux pages web. Exemple minimal de couple html / javascript : Notre fichier index.html fait r\u00e9f\u00e9rence, au sein d'une balise <script> , \u00e0 un fichier externe script.js qui contiendra notre code JavaScript. fichier index.html : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <!DOCTYPE html> < html > < head > < meta charset = \"utf-8\" > < title > un peu d'action </ title > < link href = \"style.css\" rel = \"stylesheet\" type = \"text/css\" /> </ head > < body > < script src = \"script.js\" ></ script > < p > < h2 > Une page web extr\u00eamement dynamique </ h2 > </ p > < div > < label > Changez la couleur d'arri\u00e8re-plan: </ label > < button type = \"button\" onclick = \"choix('yellow');\" > jaune </ button > < button type = \"button\" onclick = \"choix('green');\" > vert </ button > < button type = \"button\" onclick = \"choix('purple');\" > violet </ button > </ div > < div > < p > En JavaScript, le nom de la couleur choisie est : </ p > < p id = \"resultat\" ></ p > </ div > </ body > </ html > fichier script.js : 1 2 3 4 function choix ( color ){ document . body . style . background = color ; document . getElementById ( \"resultat\" ). innerHTML = color ; } Le r\u00e9sultat de cette page peut \u00eatre consult\u00e9 \u00e0 l'adresse https://exemplejs.g-lassus.repl.co . Commentaires Au sein du bouton d\u00e9clar\u00e9 par la balise button , l'attribut onclick re\u00e7oit le nom d'une fonction d\u00e9clar\u00e9e \u00e0 l'int\u00e9rieur du fichier script.js , ici la fonction choix() . Cette fonction nous permet de modifier \u00e0 la fois l'aspect esth\u00e9tique de la page (changement de la couleur de background) mais aussi le contenu de cette page, en faisant afficher le nom de la couleur. La puissance du JavaScript permet de r\u00e9aliser aujourd'hui des interfaces utilisateurs tr\u00e8s complexes au sein d'un navigateur, \u00e9quivalentes \u00e0 celles produites par des logiciels externes (pensez \u00e0 Discord, par ex.). Bien s\u00fbr, dans ces cas complexes, le serveur est aussi sollicit\u00e9 pour modifier la page, comme nous le verrons en partie 3. En savoir plus - le guide JavaScript de la fondation Mozilla : https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide - le cours d'OpenClassrooms : https://openclassrooms.com/fr/courses/2984401-apprenez-a-coder-avec-javascript Exercice 4 \u2693\ufe0e Reprenez votre page cr\u00e9\u00e9e sur repl .it aux exercices pr\u00e9c\u00e9dents et rajoutez du JavaScript pour la rendre dynamique. Faites ce que vous voulez ! 3. Quand la page est fabriqu\u00e9e \u00e0 la demande pour le client : exemple avec PHP \u2693\ufe0e Rappelons que toutes les pages que nous avons cr\u00e9\u00e9es jusqu'\u00e0 pr\u00e9sent sont uniform\u00e9ment envoy\u00e9es par le serveur au client. Aucune \u00abpr\u00e9paration\u00bb de la page en amont n'a lieu sur le serveur, aucun dialogue n'a lieu avec le serveur une fois que la page a \u00e9t\u00e9 livr\u00e9e. \u00c9videmment, si le web \u00e9tait comme ceci, il ne serait qu'une gigantesque biblioth\u00e8que en consultation seule (ce fut le cas pendant longtemps, et ce qui n'\u00e9tait d\u00e9j\u00e0 pas si mal). Les langages serveurs, parmi lesquels PHP (pr\u00e9sent sur environ 80% des serveurs), Python (via le framework Django), Java, Ruby, C#, permettent de rajouter de l'interactivit\u00e9 c\u00f4t\u00e9 serveur. Il convient de rappeler la diff\u00e9rence fondamentale entre une page statique (c\u00f4t\u00e9 serveur) et une page dynamique (c\u00f4t\u00e9 serveur) : 3.1 Page statique (c\u00f4t\u00e9 serveur) : \u2693\ufe0e Lors d'une requ\u00eate d'un client vers un serveur, si le client demande la page index.html , une copie exacte du fichier index.html est transmise au client sur sa machine. Exemple : la page http://glassus1.free.fr/interesting.html que vous avez d\u00e9j\u00e0 consult\u00e9e se trouve telle quelle sur le serveur mis \u00e0 disposition par Free pour l'h\u00e9bergement des pages personnelles : Depuis votre navigateur, l'affichage du code-source (par Ctrl-U) vous donnera le fichier html tel qu'il \u00e9tait stock\u00e9 sur le serveur. 3.2 Page dynamique (c\u00f4t\u00e9 serveur) : \u2693\ufe0e Lors d'une requ\u00eate d'un client vers un serveur, si le client demande la page test.php , un code html est g\u00e9n\u00e9r\u00e9 \u00e0 partir du fichier test.php puis est transmise au client sur sa machine. Le fichier transmis ne contient plus de balises php , il ne comporte que des balises html classiques. Exemple : la consultation de la page http://glassus1.free.fr/test.php va renvoyer la page suivante : dont le code-source est : Notez bien que ce code-source ne contient que du html . Allons regarder cette page du c\u00f4t\u00e9 du serveur : Le contenu de cette page est : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\" /> <title>Quel jour sommes-nous</title> </head> <body> <p> <?php $date = date ( \"d-m-Y\" ); Print ( \"Nous sommes le $date \" ); ?> </p> </body> </html> On y rep\u00e8re la balise <?php> : 1 2 3 4 <?php $date = date ( \"d-m-Y\" ); Print ( \"Nous sommes le $date \" ); ?> Ce code php a donc g\u00e9n\u00e9r\u00e9, lors de l'appel au serveur, le code html : 1 Nous sommes le 13-04-2020 Voil\u00e0 comment un serveur peut adapter la page qu'il renvoie, suivant l'utilisateur qui la demande. Nous verrons prochainement comment par des requ\u00eates le client peut envoyer des param\u00e8tres au serveur, et comment celui-ci modifie sa r\u00e9ponse en cons\u00e9quence. En savoir plus : https://www.php.net/manual/fr/tutorial.firstpage.php Exercice 5 \u2693\ufe0e Allez sur https://repl.it/ , et cr\u00e9ez un nouveau repl.it en choisissant PHP Web Server. Cr\u00e9ez une page renvoyant le syst\u00e8me d'exploitation de l'utilisateur.","title":"Pages web et interactions"},{"location":"T6_IHM_Web/01_Interactions_page_web.html#pages-web-et-interactions","text":"","title":"Pages web et interactions"},{"location":"T6_IHM_Web/01_Interactions_page_web.html#1-le-cas-le-plus-simple-la-meme-page-pour-tout-le-monde","text":"Nous allons tout d'abord consid\u00e9rer le cas o\u00f9 le serveur renvoie une page unique, identique pour tous les utilisateurs. De plus, l'utilisateur ne pourra pas agir sur sa page : il n'y a aucune interactivit\u00e9. Exemple de page statique c\u00f4t\u00e9 serveur et c\u00f4t\u00e9 utilisateur : - cette merveille de page web. - plus compl\u00e8te, mais tout aussi statique : cette page Wikipedia consacr\u00e9e \u00e0 John Conway.","title":"1. Le cas le plus simple : la m\u00eame page pour tout le monde"},{"location":"T6_IHM_Web/01_Interactions_page_web.html#2-quand-le-client-peut-agir-sur-sa-page-exemple-avec-javascript","text":"Jusqu'\u00e0 pr\u00e9sent, la page web envoy\u00e9e par le serveur est : 1. identique quel que soit le client. 2. statique apr\u00e8s r\u00e9ception sur l'ordinateur du client. Le JavaScript va venir r\u00e9gler le probl\u00e8me n\u00b02 : il est possible de fabriquer une page sur laquelle le client va pouvoir agir localement , sans avoir \u00e0 redemander une nouvelle page au serveur. Invent\u00e9 en 1995 par Brendan Eich pour le navigateur Netscape, le langage JavaScript s'est impos\u00e9 comme la norme aupr\u00e8s de tous les navigateurs pour apporter de l'interactivit\u00e9 aux pages web. Exemple minimal de couple html / javascript : Notre fichier index.html fait r\u00e9f\u00e9rence, au sein d'une balise <script> , \u00e0 un fichier externe script.js qui contiendra notre code JavaScript. fichier index.html : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <!DOCTYPE html> < html > < head > < meta charset = \"utf-8\" > < title > un peu d'action </ title > < link href = \"style.css\" rel = \"stylesheet\" type = \"text/css\" /> </ head > < body > < script src = \"script.js\" ></ script > < p > < h2 > Une page web extr\u00eamement dynamique </ h2 > </ p > < div > < label > Changez la couleur d'arri\u00e8re-plan: </ label > < button type = \"button\" onclick = \"choix('yellow');\" > jaune </ button > < button type = \"button\" onclick = \"choix('green');\" > vert </ button > < button type = \"button\" onclick = \"choix('purple');\" > violet </ button > </ div > < div > < p > En JavaScript, le nom de la couleur choisie est : </ p > < p id = \"resultat\" ></ p > </ div > </ body > </ html > fichier script.js : 1 2 3 4 function choix ( color ){ document . body . style . background = color ; document . getElementById ( \"resultat\" ). innerHTML = color ; } Le r\u00e9sultat de cette page peut \u00eatre consult\u00e9 \u00e0 l'adresse https://exemplejs.g-lassus.repl.co . Commentaires Au sein du bouton d\u00e9clar\u00e9 par la balise button , l'attribut onclick re\u00e7oit le nom d'une fonction d\u00e9clar\u00e9e \u00e0 l'int\u00e9rieur du fichier script.js , ici la fonction choix() . Cette fonction nous permet de modifier \u00e0 la fois l'aspect esth\u00e9tique de la page (changement de la couleur de background) mais aussi le contenu de cette page, en faisant afficher le nom de la couleur. La puissance du JavaScript permet de r\u00e9aliser aujourd'hui des interfaces utilisateurs tr\u00e8s complexes au sein d'un navigateur, \u00e9quivalentes \u00e0 celles produites par des logiciels externes (pensez \u00e0 Discord, par ex.). Bien s\u00fbr, dans ces cas complexes, le serveur est aussi sollicit\u00e9 pour modifier la page, comme nous le verrons en partie 3. En savoir plus - le guide JavaScript de la fondation Mozilla : https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide - le cours d'OpenClassrooms : https://openclassrooms.com/fr/courses/2984401-apprenez-a-coder-avec-javascript","title":"2. Quand le client peut agir sur sa page : exemple avec JavaScript"},{"location":"T6_IHM_Web/01_Interactions_page_web.html#3-quand-la-page-est-fabriquee-a-la-demande-pour-le-client-exemple-avec-php","text":"Rappelons que toutes les pages que nous avons cr\u00e9\u00e9es jusqu'\u00e0 pr\u00e9sent sont uniform\u00e9ment envoy\u00e9es par le serveur au client. Aucune \u00abpr\u00e9paration\u00bb de la page en amont n'a lieu sur le serveur, aucun dialogue n'a lieu avec le serveur une fois que la page a \u00e9t\u00e9 livr\u00e9e. \u00c9videmment, si le web \u00e9tait comme ceci, il ne serait qu'une gigantesque biblioth\u00e8que en consultation seule (ce fut le cas pendant longtemps, et ce qui n'\u00e9tait d\u00e9j\u00e0 pas si mal). Les langages serveurs, parmi lesquels PHP (pr\u00e9sent sur environ 80% des serveurs), Python (via le framework Django), Java, Ruby, C#, permettent de rajouter de l'interactivit\u00e9 c\u00f4t\u00e9 serveur. Il convient de rappeler la diff\u00e9rence fondamentale entre une page statique (c\u00f4t\u00e9 serveur) et une page dynamique (c\u00f4t\u00e9 serveur) :","title":"3. Quand la page est fabriqu\u00e9e \u00e0 la demande pour le client : exemple avec PHP"},{"location":"T6_IHM_Web/02_Protocole_HTTP_requetes_reponses.html","text":"Protocole HTTP : \u00e9tude du chargement d'une page web \u2693\ufe0e Le protocole HTTP : des requ\u00eates et des r\u00e9ponses \u2693\ufe0e HTTP (HyperText Transfer Protocol) est le protocole qui r\u00e9git la communication entre : - le client (la machine de l'utilisateur qui souhaite obtenir une page web). On dit que le client effectue une requ\u00eate . - le serveur (la machine sur laquelle sont stock\u00e9s les fichiers n\u00e9cessaires \u00e0 l'affichage de cette page web). Le serveur va renvoyer une r\u00e9ponse . D\u00e9roul\u00e9 d'une requ\u00eate \u2693\ufe0e Prenons pour exemple la requ\u00eate d'un navigateur vers la page html://glassus1.free.fr/interesting.html le navigateur analyse l'url : la demande concerne la page interesting.html , stock\u00e9e sur le serveur glassus1.free.fr . une demande est pr\u00e9alablement effectu\u00e9e aupr\u00e8s pour obtenir l'adresse IP du serveur glassus1.free.fr (qui est en fait un sous-domaine du serveur des pages personnelles de l'op\u00e9rateur Free). Ici, l'adresse IP sera 212.27.63.111 (on la retrouvera dans la capture de la fen\u00eatre d'Outils de dev\u00e9loppement). la requ\u00eate est effectu\u00e9e sur le port 80 de l'adresse 212.27.63.111 . la r\u00e9ponse est envoy\u00e9e au navigateur, qui en extrait la charge utile et proc\u00e8de \u00e0 l'affichage de la page. Analyse \u00e0 l'aide d'un navigateur \u2693\ufe0e Observons \u00e0 partir de l'Inspecteur d'\u00e9l\u00e9ment d'un navigateur (ici Firefox) les informations qui transitent lors de la requ\u00eate et de la r\u00e9ponse. Point 1 : La requ\u00eate de type GET vers l'url http://glassus1.free.fr/interesting.html a g\u00e9n\u00e9r\u00e9 un code de r\u00e9ponse 200 OK , ce qui signifie que la requ\u00eate a \u00e9t\u00e9 trait\u00e9e et que la r\u00e9ponse contenant la page a \u00e9t\u00e9 envoy\u00e9e. Vous pouvez trouver \u00e0 l'adresse https://developer.mozilla.org/fr/docs/Web/HTTP/Status la totalit\u00e9 des codes de r\u00e9ponse possibles. Citons par exemple : 304 Not Modified : la page n'a pas eu besoin d'\u00eatre renvoy\u00e9e, elle indique au navigateur d'aller la rechercher dans son cache. On peut obtenir ce code de r\u00e9ponse en actualisant la page actuelle http://glassus1.free.fr/interesting.fr (qui est une page ultra-basique, et n'\u00e9volue pas). Pour r\u00e9-obtenir un code 200, il faut faire un hard-refresh en appuyant sur Maj pendant l'actualisation. 403 Forbidden : le client n'a pas le droit d'acc\u00e8s \u00e0 la page. 404 Not Found : la page demand\u00e9e est introuvable 500 Internal Server Error : le serveur a rencontr\u00e9 une erreur qu'il ne sait pas traiter. Point 2 : en observant la taille totale des donn\u00e9es transf\u00e9r\u00e9es (388 octets), on peut comprendre que la r\u00e9ponse faite par le serveur est constitu\u00e9e : d'un En-t\u00eate (264 octets) qui contient : 1 2 3 4 5 6 7 8 9 HTTP/1.1 200 OK Date: Wed, 22 Apr 2020 08:02:01 GMT Server: Apache/ProXad [Jan 23 2019 19:58:42] Last-Modified: Sun, 12 Apr 2020 16:39:55 GMT ETag: \"15d7c75-7c-5e93445b\" Connection: close Accept-Ranges: bytes Content-Length: 124 Content-Type: text/html du corps de la R\u00e9ponse (dont on sait d'apr\u00e8s l'en-t\u00eate qu'il p\u00e8se 124 octets). Ce corps de la r\u00e9ponse est la charge utile de la r\u00e9ponse. Elle contient ici le code html de la page : 1 2 3 4 5 6 7 8 9 <!DOCTYPE html> <html> <head> <title>Waouh</title> </head> <body> Ceci est vraiment une jolie page web. </body> </html> Remarque : on peut observer que le navigateur a aussi effectu\u00e9 (de sa propre initiative) une requ\u00eate vers un fichier favicon.ico qui est l'icone de la page web dans les onglets du navigateur ou la barre de favoris. Ce fichier \u00e9tait bien pr\u00e9sent sur le serveur (ce n'est pas toujours le cas), il a donc \u00e9t\u00e9 envoy\u00e9 dans la r\u00e9ponse du serveur. De mani\u00e8re g\u00e9n\u00e9rale, une requ\u00eate vers un site web moins \u00e9l\u00e9mentaire va occasionner une multitude de r\u00e9ponses. Par exemple, l'appel au site www.lyceemauriac.fr g\u00e9n\u00e8re 129 requ\u00eates/r\u00e9ponses diff\u00e9rentes, compos\u00e9es de fichiers html, css, js, de fichiers de fontes woff2, d'images jpg, png...","title":"Protocole HTTP : \u00e9tude du chargement d'une page web"},{"location":"T6_IHM_Web/02_Protocole_HTTP_requetes_reponses.html#protocole-http-etude-du-chargement-dune-page-web","text":"","title":"Protocole HTTP : \u00e9tude du chargement d'une page web"},{"location":"T6_IHM_Web/02_Protocole_HTTP_requetes_reponses.html#le-protocole-http-des-requetes-et-des-reponses","text":"HTTP (HyperText Transfer Protocol) est le protocole qui r\u00e9git la communication entre : - le client (la machine de l'utilisateur qui souhaite obtenir une page web). On dit que le client effectue une requ\u00eate . - le serveur (la machine sur laquelle sont stock\u00e9s les fichiers n\u00e9cessaires \u00e0 l'affichage de cette page web). Le serveur va renvoyer une r\u00e9ponse .","title":"Le protocole HTTP : des requ\u00eates et des r\u00e9ponses"},{"location":"T6_IHM_Web/02_Protocole_HTTP_requetes_reponses.html#deroule-dune-requete","text":"Prenons pour exemple la requ\u00eate d'un navigateur vers la page html://glassus1.free.fr/interesting.html le navigateur analyse l'url : la demande concerne la page interesting.html , stock\u00e9e sur le serveur glassus1.free.fr . une demande est pr\u00e9alablement effectu\u00e9e aupr\u00e8s pour obtenir l'adresse IP du serveur glassus1.free.fr (qui est en fait un sous-domaine du serveur des pages personnelles de l'op\u00e9rateur Free). Ici, l'adresse IP sera 212.27.63.111 (on la retrouvera dans la capture de la fen\u00eatre d'Outils de dev\u00e9loppement). la requ\u00eate est effectu\u00e9e sur le port 80 de l'adresse 212.27.63.111 . la r\u00e9ponse est envoy\u00e9e au navigateur, qui en extrait la charge utile et proc\u00e8de \u00e0 l'affichage de la page.","title":"D\u00e9roul\u00e9 d'une requ\u00eate"},{"location":"T6_IHM_Web/02_Protocole_HTTP_requetes_reponses.html#analyse-a-laide-dun-navigateur","text":"Observons \u00e0 partir de l'Inspecteur d'\u00e9l\u00e9ment d'un navigateur (ici Firefox) les informations qui transitent lors de la requ\u00eate et de la r\u00e9ponse. Point 1 : La requ\u00eate de type GET vers l'url http://glassus1.free.fr/interesting.html a g\u00e9n\u00e9r\u00e9 un code de r\u00e9ponse 200 OK , ce qui signifie que la requ\u00eate a \u00e9t\u00e9 trait\u00e9e et que la r\u00e9ponse contenant la page a \u00e9t\u00e9 envoy\u00e9e. Vous pouvez trouver \u00e0 l'adresse https://developer.mozilla.org/fr/docs/Web/HTTP/Status la totalit\u00e9 des codes de r\u00e9ponse possibles. Citons par exemple : 304 Not Modified : la page n'a pas eu besoin d'\u00eatre renvoy\u00e9e, elle indique au navigateur d'aller la rechercher dans son cache. On peut obtenir ce code de r\u00e9ponse en actualisant la page actuelle http://glassus1.free.fr/interesting.fr (qui est une page ultra-basique, et n'\u00e9volue pas). Pour r\u00e9-obtenir un code 200, il faut faire un hard-refresh en appuyant sur Maj pendant l'actualisation. 403 Forbidden : le client n'a pas le droit d'acc\u00e8s \u00e0 la page. 404 Not Found : la page demand\u00e9e est introuvable 500 Internal Server Error : le serveur a rencontr\u00e9 une erreur qu'il ne sait pas traiter. Point 2 : en observant la taille totale des donn\u00e9es transf\u00e9r\u00e9es (388 octets), on peut comprendre que la r\u00e9ponse faite par le serveur est constitu\u00e9e : d'un En-t\u00eate (264 octets) qui contient : 1 2 3 4 5 6 7 8 9 HTTP/1.1 200 OK Date: Wed, 22 Apr 2020 08:02:01 GMT Server: Apache/ProXad [Jan 23 2019 19:58:42] Last-Modified: Sun, 12 Apr 2020 16:39:55 GMT ETag: \"15d7c75-7c-5e93445b\" Connection: close Accept-Ranges: bytes Content-Length: 124 Content-Type: text/html du corps de la R\u00e9ponse (dont on sait d'apr\u00e8s l'en-t\u00eate qu'il p\u00e8se 124 octets). Ce corps de la r\u00e9ponse est la charge utile de la r\u00e9ponse. Elle contient ici le code html de la page : 1 2 3 4 5 6 7 8 9 <!DOCTYPE html> <html> <head> <title>Waouh</title> </head> <body> Ceci est vraiment une jolie page web. </body> </html> Remarque : on peut observer que le navigateur a aussi effectu\u00e9 (de sa propre initiative) une requ\u00eate vers un fichier favicon.ico qui est l'icone de la page web dans les onglets du navigateur ou la barre de favoris. Ce fichier \u00e9tait bien pr\u00e9sent sur le serveur (ce n'est pas toujours le cas), il a donc \u00e9t\u00e9 envoy\u00e9 dans la r\u00e9ponse du serveur. De mani\u00e8re g\u00e9n\u00e9rale, une requ\u00eate vers un site web moins \u00e9l\u00e9mentaire va occasionner une multitude de r\u00e9ponses. Par exemple, l'appel au site www.lyceemauriac.fr g\u00e9n\u00e8re 129 requ\u00eates/r\u00e9ponses diff\u00e9rentes, compos\u00e9es de fichiers html, css, js, de fichiers de fontes woff2, d'images jpg, png...","title":"Analyse \u00e0 l'aide d'un navigateur"},{"location":"T6_IHM_Web/03_Get_Post_Formulaires.html","text":"Requ\u00eates GET, POST et formulaires \u2693\ufe0e 1. C\u00f4t\u00e9 client : comment envoyer des param\u00e8tres \u00e0 un serveur ? \u2693\ufe0e 1.1. La m\u00e9thode GET \u2693\ufe0e Consid\u00e9rons le formulaire suivant, inclus dans une page html ouverte dans le navigateur du client : 1 2 3 4 5 6 7 Le mot de passe est : < form action = \"cible2.php\" method = \"get\" > < p > < input type = \"password\" name = \"pass\" /> < input type = \"submit\" value = \"Valider\" /> </ p > </ form > Aper\u00e7u : Explications : - le fichier cible2.php est le fichier sur le serveur qui recevra les param\u00e8tres contenus dans le formulaire. - le param\u00e8tre sera nomm\u00e9 pass et sera de type password , ce qui signifie qu'on n'affichera pas les caract\u00e8res tap\u00e9s par l'utilisateur. On aurait pu aussi avoir un type : - text : le texte s'affiche en clair (pour les login par ex) - radio : pour une s\u00e9lection (d'un seul \u00e9l\u00e9ment) - checkbox : pour une s\u00e9lection (\u00e9ventuellement multiple) - un bouton comportant le label \u00abValider\u00bb d\u00e9clenchera l'envoi (gr\u00e2ce au type particulier submit ) des param\u00e8tres (ici un seul, la variable pass ) au serveur. Test : \u2693\ufe0e Rendez-vous sur la page http://glassus1.free.fr/ex_get.html et testez un mot de passe. Observez attentivement l'url de la page sur laquelle vous \u00eates arriv\u00e9s. Que remarquez-vous ? La m\u00e9thode GET et la confidentialit\u00e9 : \u2693\ufe0e Les param\u00e8tres pass\u00e9s au serveur par la m\u00e9thode GET sont transmis dans l'url de la requ\u00eate . Ils sont donc lisibles en clair par n'importe qui. \u00c9videmment, c'est une m\u00e9thode catastrophique pour la transmission des mots de passe. Par contre, c'est une m\u00e9thode efficace pour acc\u00e9der directement \u00e0 une page particuli\u00e8re : ainsi l'url https://www.google.fr/search?q=bordeaux nous am\u00e8nera directement au r\u00e9sultat de la recherche Google sur le mot-cl\u00e9 \u00abbordeaux\u00bb. 1.2. La m\u00e9thode POST \u2693\ufe0e Dans notre code de formulaire du 1.1, modifions l'attribut method , auparavant \u00e9gal \u00e0 \"get\" . Passons-le \u00e9gal \u00e0 \"post\" : 1 2 3 4 5 6 7 Le mot de passe est : < form action = \"cible2.php\" method = \"post\" > < p > < input type = \"password\" name = \"pass\" /> < input type = \"submit\" value = \"Valider\" /> </ p > </ form > Test : \u2693\ufe0e Rendez-vous sur la page http://glassus1.free.fr/ex_post.html et testez un mot de passe. Observez attentivement l'url de la page sur laquelle vous \u00eates arriv\u00e9s. Que remarquez-vous ? La m\u00e9thode POST et la confidentialit\u00e9 : \u2693\ufe0e Les param\u00e8tres pass\u00e9s au serveur par la m\u00e9thode POST ne sont pas visibles dans l'url de la requ\u00eate. Ils sont contenus dans le corps de la requ\u00eate, mais non affich\u00e9s sur le navigateur. Donc, la transmission du mot de passe est bien s\u00e9curis\u00e9e par la m\u00e9thode POST ? Pas du tout ! Si le protocole de transmission est du http et non pas du https , n'importe qui interceptant le trafic peut lire le contenu de la requ\u00eate et y trouver le mot de passe en clair. Exemple avec Wireshark : Le contenu de la variable \"pass\" est donc visible dans le contenu de la requ\u00eate. Le passage en https chiffre le contenu de la requ\u00eate et emp\u00eache donc la simple lecture du mot de passe. R\u00e9sum\u00e9 : quand utiliser GET ou POST ? \u2693\ufe0e GET : la m\u00e9thode GET doit \u00eatre utilis\u00e9e quand les param\u00e8tres \u00e0 envoyer : n'ont pas de caract\u00e8re confidentiel. n'ont pas vocation \u00e0 cr\u00e9er des modifications sur le serveur (ceci est plus une bonne pratique qu'une interdiction technique) ne sont pas trop longs. En effet, vu qu'ils seront contenus dans l'url, il peut exister des limites de longueur sp\u00e9cifiques au navigateur. Une taille inf\u00e9rieure \u00e0 2000 caract\u00e8re est conseill\u00e9e. Si vous vous demandez \u00e0 quoi peuvent servir des url si longues, songez \u00e0 ce type d'url, (ici PythonTutor) o\u00f9 le code du programme \u00e0 analyser est contenu dans l'url : http://pythontutor.com/visualize.html#code=L%20%3D%20%5B2,%203,%206,%207,%2011,%2014,%2018,%2019,%2024%5D%0A%0Adef%20trouve_dicho%28L,%20n%29%20%3A%0A%20%20%20%20indice_debut%20%3D%200%0A%20%20%20%20indice_fin%20%3D%20len%28L%29%20-%201%0A%20%20%20%20while%20indice_debut%20%3C%3D%20indice_fin%20%3A%0A%20%20%20%20%20%20%20%20indice_centre%20%3D%20%28indice_debut%20%2B%20indice_fin%29%20//%202%0A%20%20%20%20%20%20%20%20valeur_centrale%20%3D%20L%5Bindice_centre%5D%0A%20%20%20%20%20%20%20%20if%20valeur_centrale%20%3D%3D%20n%20%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20indice_centre%0A%20%20%20%20%20%20%20%20if%20valeur_centrale%20%3C%20n%20%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20indice_debut%20%3D%20indice_centre%20%2B%201%0A%20%20%20%20%20%20%20%20else%20%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20indice_fin%20%3D%20indice_centre%20-%201%0A%20%20%20%20return%20None%0A%0Aprint%28trouve_dicho%28L,14%29%29&cumulative=false&curInstr=0&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false POST : la m\u00e9thode POST doit \u00eatre utilis\u00e9e quand les param\u00e8tres \u00e0 envoyer : ont un caract\u00e8re confidentiel (attention, \u00e0 coupler imp\u00e9rativement avec un protocole de chiffrement). peuvent avoir une longueur tr\u00e8s importante (le param\u00e8tre \u00e9tant dans le corps de la requ\u00eate et non plus dans l'url, sa longueur peut \u00eatre arbitraire). ont vocation \u00e0 provoquer des changements sur le serveur. Ainsi, un ordre d'achat sur un site de commerce sera n\u00e9cessairement pass\u00e9 par une m\u00e9thode POST. Les navigateurs pr\u00e9viennent alors le risque de \u00abdouble commande\u00bb lors d'une actualisation malencontreuse de la page par l'utilisateur par la fen\u00eatre : Cette fen\u00eatre est caract\u00e9ristique de l'utilisation d'une m\u00e9thode POST. 2. C\u00f4t\u00e9 serveur : comment r\u00e9cup\u00e9rer les param\u00e8tres envoy\u00e9s ? \u2693\ufe0e Du c\u00f4t\u00e9 du serveur, le langage utilis\u00e9 (PHP, Java...) doit r\u00e9cup\u00e9rer les param\u00e8tres envoy\u00e9s pour modifier les \u00e9lements d'une nouvelle page, mettre \u00e0 jour une base de donn\u00e9es, etc. Comment sont r\u00e9cup\u00e9r\u00e9es ces valeurs ? Exemple en PHP \u2693\ufe0e L'acronyme PHP signifie **P**HP : **H**ypertext **P**rocessor (c'est un acronyme r\u00e9cursif ). Notre exemple va contenir deux fichiers : - une page page1.html , qui contiendra un formulaire et qui renverra, par la m\u00e9thode GET, un param\u00e8tre \u00e0 la page page2.php . - une page page2.php , qui g\u00e9n\u00e8rera un code html personnalis\u00e9 en fonction du param\u00e8tre re\u00e7u. #### page1.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 <!DOCTYPE html> < html > < head > < meta charset = \"utf-8\" > < title > exemple </ title > </ head > < body > Votre OS actuel est un : < form action = page2.php method = \"get\" > < p > < input type = \"radio\" name = \"OS\" value = \"Windows\" > Windows </ input > < input type = \"radio\" name = \"OS\" value = \"MacOS\" > MacOS </ input > < input type = \"radio\" name = \"OS\" value = \"GNU/Linux\" > GNU/Linux </ input > </ p > < p > < input type = \"submit\" value = \"Valider\" /> </ p > </ form > </ body > </ html > #### page2.php ```php Le meilleur OS ``` #### D\u00e9tail du fonctionnement : 1. \u00c0 l'arriv\u00e9e sur la page page1.html , un formulaire de type boutons radio lui propose : 2. Lorsque l'utilisateur clique sur \u00abValider\u00bb, la variable nomm\u00e9e OS va recevoir la valeur choisie et va \u00eatre transmise par une requ\u00eate GET \u00e0 l'url donn\u00e9e par la variable action d\u00e9finie en d\u00e9but de formulaire. Ici, le navigateur va donc demander \u00e0 acc\u00e9der \u00e0 la page page2.php?OS=MacOS (par exemple) 3. Le serveur PHP qui h\u00e9berge la page page2.php va recevoir la demande d'acc\u00e8s \u00e0 la page ainsi que la valeur de la variable OS . Dans le code PHP, on reconnait : - le bool\u00e9en isset($_GET['OS']) qui v\u00e9rifie si le param\u00e8tre OS a bien re\u00e7u une valeur. - l'expression $_GET['OS'] qui r\u00e9cup\u00e8re cette valeur. Si la valeur avait \u00e9t\u00e9 transmise par m\u00e9thode POST (pour un mot de passe, par exemple), la variable aurait \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9e par $_POST['OS'] . Elle n'aurait par contre pas \u00e9t\u00e9 affich\u00e9e dans l'url de la page. 4. La page page2.php?OS=MacOS s'affiche sur le navigateur de l'utilisateur : Remarque \u2693\ufe0e L'exemple ci-dessus est un mauvais exemple : rien ne justifie l'emploi d'un serveur distant. L'affichage de ce message aurait tr\u00e8s bien pu se faire en local sur le navigateur du client, en Javascript par exemple. L'envoi de param\u00e8tre \u00e0 un serveur distant est n\u00e9cessaire pour aller interroger une base de donn\u00e9es, par exemple (lorsque vous remplissez un formulaire sur le site https://www.oui.sncf/, les bases de donn\u00e9es des horaires de trains, des places disponibles et de leurs tarifs ne sont pas h\u00e9berg\u00e9es sur votre ordinateur en local...). La v\u00e9rification d'un mot de passe doit aussi se faire sur un serveur distant. Exercice : attaque par force brute et requ\u00eate GET \u2693\ufe0e Pr\u00e9-requis 1 : le module requests en python \u2693\ufe0e Le module requests permet d'aller chercher le contenu d'une page web, suivant la syntaxe ci-dessous. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 >>> import requests >>> p = requests . get ( \"http://glassus1.free.fr/interesting.html\" , verify = False ) >>> print ( p . text ) < ! DOCTYPE html > < html > < head > < title > Waouh </ title > </ head > < body > Ceci est vraiment une jolie page web . </ body > </ html > Pr\u00e9-requis 2 : l'extraction d'un fichier texte sous forme de liste \u2693\ufe0e Le code ci-dessous permet de collecter dans une liste mots l'ensemble des mots compris dans le fichier monfichiertexte.txt (si celui-ci comprend un mot par ligne) 1 2 3 4 5 6 f = open ( \"monfichiertexte.txt\" , \"r\" ) # ouverture du fichier r = f . readlines () # r est une liste contenant toutes les lignes du fichier f . close () # on ferme le fichier mots = [] # notre liste finale for k in r : mots . append ( k [: - 1 ]) # permet de se d\u00e9barasser du caract\u00e8re de fin de ligne Exercice : \u2693\ufe0e Votre objectif est de trouver le mot de passe demand\u00e9 sur la page http://glassus1.free.fr/exoBF.html Vous allez vous appuyer sur un leak ( fuite ) tr\u00e8s c\u00e9l\u00e8bre de mots de passe , qui est le leak du site Rockyou. Dans la base de donn\u00e9es de ce site, 32 millions de mots de passe \u00e9taient stock\u00e9s en clair \u00af\\_(\u30c4)_/\u00af . Lorsque le site a \u00e9t\u00e9 pirat\u00e9 (par une injection SQL, voir le cours de Terminale), ces 32 millions de mots de passe se sont retrouv\u00e9s dans la nature. Ils sont aujourd'hui t\u00e9l\u00e9chargeables librement, et constituent un dictionnaire de 14 341 564 mots de passe diff\u00e9rents (car parmi les 32 millions d'utilisateurs, beaucoup utilisaient des mots de passe identiques). Ce fichier est t\u00e9l\u00e9chargeable ici , mais attention il p\u00e8se 134 Mo. Nous allons utiliser un fichier beaucoup plus l\u00e9ger ne contenant que les 1000 premiers mots de passe : vous le trouverez \u00e0 l'adresse http://glassus1.free.fr/extraitrockyou.txt . L'un de ces mots de passe est le mot de passe demand\u00e9 \u00e0 la page http://glassus1.free.fr/exoBF.html . Lequel ?","title":"Requ\u00eates GET, POST et formulaires"},{"location":"T6_IHM_Web/03_Get_Post_Formulaires.html#requetes-get-post-et-formulaires","text":"","title":"Requ\u00eates GET, POST et formulaires"},{"location":"T6_IHM_Web/03_Get_Post_Formulaires.html#1-cote-client-comment-envoyer-des-parametres-a-un-serveur","text":"","title":"1. C\u00f4t\u00e9 client : comment envoyer des param\u00e8tres \u00e0 un serveur ?"},{"location":"T6_IHM_Web/03_Get_Post_Formulaires.html#11-la-methode-get","text":"Consid\u00e9rons le formulaire suivant, inclus dans une page html ouverte dans le navigateur du client : 1 2 3 4 5 6 7 Le mot de passe est : < form action = \"cible2.php\" method = \"get\" > < p > < input type = \"password\" name = \"pass\" /> < input type = \"submit\" value = \"Valider\" /> </ p > </ form > Aper\u00e7u : Explications : - le fichier cible2.php est le fichier sur le serveur qui recevra les param\u00e8tres contenus dans le formulaire. - le param\u00e8tre sera nomm\u00e9 pass et sera de type password , ce qui signifie qu'on n'affichera pas les caract\u00e8res tap\u00e9s par l'utilisateur. On aurait pu aussi avoir un type : - text : le texte s'affiche en clair (pour les login par ex) - radio : pour une s\u00e9lection (d'un seul \u00e9l\u00e9ment) - checkbox : pour une s\u00e9lection (\u00e9ventuellement multiple) - un bouton comportant le label \u00abValider\u00bb d\u00e9clenchera l'envoi (gr\u00e2ce au type particulier submit ) des param\u00e8tres (ici un seul, la variable pass ) au serveur.","title":"1.1. La m\u00e9thode GET"},{"location":"T6_IHM_Web/03_Get_Post_Formulaires.html#12-la-methode-post","text":"Dans notre code de formulaire du 1.1, modifions l'attribut method , auparavant \u00e9gal \u00e0 \"get\" . Passons-le \u00e9gal \u00e0 \"post\" : 1 2 3 4 5 6 7 Le mot de passe est : < form action = \"cible2.php\" method = \"post\" > < p > < input type = \"password\" name = \"pass\" /> < input type = \"submit\" value = \"Valider\" /> </ p > </ form >","title":"1.2. La m\u00e9thode POST"},{"location":"T6_IHM_Web/03_Get_Post_Formulaires.html#2-cote-serveur-comment-recuperer-les-parametres-envoyes","text":"Du c\u00f4t\u00e9 du serveur, le langage utilis\u00e9 (PHP, Java...) doit r\u00e9cup\u00e9rer les param\u00e8tres envoy\u00e9s pour modifier les \u00e9lements d'une nouvelle page, mettre \u00e0 jour une base de donn\u00e9es, etc. Comment sont r\u00e9cup\u00e9r\u00e9es ces valeurs ?","title":"2. C\u00f4t\u00e9 serveur : comment r\u00e9cup\u00e9rer les param\u00e8tres envoy\u00e9s ?"},{"location":"T6_IHM_Web/03_Get_Post_Formulaires.html#exercice-attaque-par-force-brute-et-requete-get","text":"","title":"Exercice : attaque par force brute et requ\u00eate GET"}]}